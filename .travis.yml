# competition for Thundercleese
notifications:
  irc: "chat.freenode.net#enigma"
# disable the depth option for git allowing us to merge multiple prs simultaneously
git:
  depth: false
# don't build "feature" branches
branches:
  only:
    - "master"

before_install:
  - |
    # install general dependencies used by more than one job
    set -eo pipefail

    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get -qq -y install build-essential zlib1g-dev libboost-dev libboost-iostreams-dev\
        libboost-filesystem-dev libboost-program-options-dev libboost-system-dev;

      if [ "$COMPILER" == "gcc32" ] || [ "$COMPILER" == "clang32" ]; then
        sudo dpkg --add-architecture i386;
        sudo apt-get -qq -y install libc++-dev:i386 libglu1-mesa:i386\
          libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1-dev libx11-6:i386;

        if [ "$COMPILER" == "gcc32" ]; then
          sudo apt-get -qq -y install gcc-multilib g++-multilib;
        fi

        sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so;
        sudo ln -s /usr/lib/i386-linux-gnu/libX11.so.6 /usr/lib/i386-linux-gnu/libX11.so;
        sudo ln -s /usr/lib/i386-linux-gnu/libGLU.so.1 /usr/lib/i386-linux-gnu/libGLU.so;
        sudo ln -s /usr/include/x86_64-linux-gnu/zconf.h /usr/include;
      elif [ "$COMPILER" == "MinGW64" ] || [ "$COMPILER" == "MinGW32" ]; then
        sudo apt-get -qq -y install mingw-w64 wine;
        curl -L https://github.com/fundies/enigma-libs/files/1347135/enigma-libs.zip > enigma-libs.zip;
        unzip enigma-libs.zip -d ENIGMAsystem/;
        mv ENIGMAsystem/Install ENIGMAsystem/Additional;
      else
        sudo apt-get -qq -y install libc++-dev libglu1-mesa-dev;
      fi

      if [ "$AUDIO" == "OpenAL" ]; then
        sudo apt-get -qq -y install libalure-dev libvorbisfile3 libvorbis-dev libdumb1-dev;
      elif [ "$AUDIO" == "SFML" ]; then
        sudo apt-get -qq -y install libsfml-dev;
      fi

      if [ "$TEST_HARNESS" == true ]; then
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
        sudo apt-get update;
        sudo apt-get -qq -y install cmake libgtest-dev xvfb wmctrl xdotool xfwm4 lcov gcc-7 g++-7 cpp-7;
        sudo update-alternatives --remove-all cpp;
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 \
                    15 \
                    --slave   /usr/bin/g++ g++ /usr/bin/g++-7 \
                    --slave   /usr/bin/gcov gcov /usr/bin/gcov-7 \
                    --slave   /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-7 \
                    --slave   /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-7 \
                    --slave   /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-7 \
                    --slave   /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-7 \
                    --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-7;
        pushd /usr/src/gtest;
        sudo cmake CMakeLists.txt;
        sudo make;
        sudo cp *.a /usr/lib
        popd
      fi
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew upgrade gcc || brew install gcc || brew link --overwrite gcc;
    fi

# build JDI and the CLI
install:
  - chmod +x ./ci-build.sh
  - make -j4
  - make -j4 emake

# by default most of our jobs will be run on a linux instance
os: linux
dist: trusty
compiler: gcc
language: cpp

env:
  global:
    - OUTPUT=/tmp/test
matrix:
  include:
    # OSX
    - { os: osx, osx_image: xcode9.2,
        env: COMPILER=clang PLATFORM=None MODE=Debug GRAPHICS=None AUDIO=None COLLISION=None NETWORK=None WIDGETS=None EXTENSIONS="None" }
    - { os: osx, osx_image: xcode9.2,
        env: COMPILER=gcc PLATFORM=None MODE=Debug GRAPHICS=None AUDIO=None COLLISION=None NETWORK=None WIDGETS=None EXTENSIONS="None" }
  # don't wait for OSX
  fast_finish: true
  allow_failures:
    - os: osx

script:
  - |
    if [ "$TEST_HARNESS" == true ]; then
      make test-runner
      export DISPLAY=:1
      Xvfb :1 -screen 0 1024x768x24 &
      xfwm4 &
      ASAN_OPTIONS=exitcode=0 ./test-runner
      bash <(curl -s https://codecov.io/bash) -f "*.info"
    else
      ./ci-build.sh
    fi
