syntax = "proto2";
package buffers.resources;

import "options.proto";

message Windows {
  optional WindowsGeneral general = 1;
  optional WindowsGraphics graphics = 2;
  optional WindowsInstaller installer = 3;
}

message WindowsGeneral {
  optional string display_name = 1 [(gmx) = "option_display_name"];
  optional uint32 version_major = 2 [(gmx) = "option_version_major"];
  optional uint32 version_minor = 3 [(gmx) = "option_version_minor"];
  optional uint32 version_build = 4 [(gmx) = "option_version_build"];
  optional uint32 version_release = 5 [(gmx) = "option_version_release"];
  optional string company = 6 [(gmx) = "option_version_company"];
  optional string product = 7 [(gmx) = "option_version_product"];
  optional string copyright = 8 [(gmx) = "option_version_copyright"];
  optional string description = 9 [(gmx) = "option_version_description"];
  optional bool show_cursor = 10 [(gmx) = "option_showcursor"];
  optional string game_icon = 11 [(gmx) = "option_windows_game_icon"];
  optional string splash_screen = 12 [(gmx) = "option_windows_splash_screen"];
  optional bool show_splash_screen = 13 [(gmx) = "option_windows_use_splash"];
  optional uint32 sleep_margin = 14 [(gmx) = "option_windows_sleep_margin"];
  optional string save_data_location = 15 [(gmx) = "option_windows_save_location"];
}

message WindowsGraphics {
  optional bool start_in_fullscreen = 1 [(gmx) = "option_fullscreen"];
  optional bool allow_fullscreen_change = 2 [(gmx) = "option_screenkey"];
  optional bool smooth_colors = 3 [(gmx) = "option_interpolate"];
  optional bool force_software_vertex_processing = 4 [(gmx) = ""];
  optional bool freeze_on_lose_focus = 5 [(gmx) = "option_freeze"];
  optional bool use_synchronization = 6 [(gmx) = ""];
  optional bool window_sizeable = 7 [(gmx) = "option_sizeable"];
  optional bool window_showborder = 8 [(gmx) = "option_noborder"];
  optional bool window_showicons = 9 [(gmx) = "option_nobuttons"];
  optional bool window_stayontop = 10 [(gmx) = "option_stayontop"];
  optional double window_scale = 11 [(gmx) = "option_scale"];
  optional bool create_textures_on_demand = 12 [(gmx) = "option_windows_create_textures_on_demand"];
  optional bool alternate_synchronization_method = 13 [(gmx) = "option_windows_alternate_sync_method"];

  enum VertexBufferMethod { FAST = 0; COMPATIBLE = 1; MOST_COMPATIBLE = 2; }
  optional VertexBufferMethod vertex_buffer_method = 14 [(gmx) = "option_windows_vertex_buffer_method2"];

  optional uint32 texture_page_size = 15 [(gmx) = "option_windows_texture_page"];
}

message WindowsInstaller {
  optional string finished_image = 1 [(gmx) = "option_windows_runner_finished"];
  optional string header_image = 2 [(gmx) = "option_windows_runner_header"];
  optional string nsis_script = 3 [(gmx) = "option_windows_nsis_file"];
  optional string license_agreement = 4 [(gmx) = "option_windows_license"];
}
