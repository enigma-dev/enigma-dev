float f = (float) -.5;
double d = -.5;
long double ld = -.5;
int i = -30;
unsigned u = 30;
long l = -60;
unsigned lu = 60;
variant v = -120;
var a = -150;


cons_show_message("Test start!");

gtest_assert_true(f && d && ld && i && u && l && lu && (v != 0) && (a != 0),
                  "Someone zeroed one of the inputs.");

// The abs() function has a lot of overloads.
gtest_assert_eq(abs(f),  -f);
gtest_assert_eq(abs(d),  -d);
gtest_assert_eq(abs(ld), -ld);
gtest_assert_eq(abs(i),  -i);
gtest_assert_eq(abs(l),  -l);
gtest_assert_eq(abs(u),   u);
gtest_assert_eq(abs(lu),  lu);
gtest_assert_eq(abs(v),  -v);
gtest_assert_eq(abs(a),  -a);

// Simple tests of sqr
gtest_assert_eq(sqr(f), f * f);
gtest_assert_eq(sqr(d), d * d);
gtest_assert_eq(sqr(l), l * l);
gtest_assert_eq(sqr(u), u * u);
gtest_assert_eq(sqr(5), 25);
gtest_assert_eq(sqr(-5), 25);

// Simple tests of equal
gtest_assert_true(equal(d, -.5));
gtest_assert_true(equal(d,   d));
gtest_assert_true(equal(-.5, d));
gtest_assert_true(equal(f, -.5));
gtest_assert_true(equal(f,   f));
gtest_assert_true(equal(-.5, f));
gtest_assert_true(equal(d,   f));
gtest_assert_true(equal(.1 + .1 + .1, .3));  // Epsilon is important, here!

// Simple tests of cmp
gtest_assert_eq(cmp(f, d), 0)
gtest_assert_eq(cmp(1.5, 1.5), 0)
gtest_assert_eq(cmp(1.5, 1.25), 1)
gtest_assert_eq(cmp(1.5, 1.75), -1)
gtest_assert_eq(cmp(100, 50), 1)
gtest_assert_eq(cmp(100, 100), 0)
gtest_assert_eq(cmp(100, 150), -1)

// Simple tests of point_distance
// types alternated to confuse compiler; values chosen to confuse cheeseboy
gtest_assert_eq(point_distance(1, 2, 1 + 3, 2 + 4), 5);
gtest_assert_eq(point_distance(5.0, 5, 10, 17.0),   13);
// Same strategy for _3d
gtest_assert_eq(point_distance_3d(1, 2, 3, 2, 4, 5),       3);
gtest_assert_eq(point_distance_3d(1.0, 2, 3.0, 3, 5.0, 9), 7);
// Similar strategy for point_direction
gtest_assert_eq(point_direction(0, -1, 2, -3), 45);
gtest_assert_eq(point_direction(3.0, 2, 1, 0.0), 135);

// These are common variable names that happen to conflict with Bessel functions.
j0 = 1;
y0 = 2;
y1 = 3;
yn = 4;

cons_show_message("Test end!");

game_end();
