/// DS List
///////////////////////////////////////////////

list_str = ds_list_create();
list_num = ds_list_create();
gtest_assert_true(ds_list_exists(list_str));
gtest_assert_true(ds_list_exists(list_num));
gtest_assert_true(ds_list_empty(list_str));
gtest_assert_true(ds_list_empty(list_num));

ds_list_add(list_str, "alarm");
ds_list_add(list_str, "bank");
ds_list_add(list_str, "cash");
gtest_assert_eq(ds_list_size(list_str), 3);
gtest_assert_false(ds_list_empty(list_str));

ds_list_sort(list_str, false);
gtest_assert_eq(ds_list_find_value(list_str, 0), "cash");
gtest_assert_eq(ds_list_find_value(list_str, 1), "bank");
gtest_assert_eq(ds_list_find_value(list_str, 2), "alarm");

ds_list_sort(list_str, true);
gtest_assert_eq(ds_list_find_value(list_str, 0), "alarm");
gtest_assert_eq(ds_list_find_value(list_str, 1), "bank");
gtest_assert_eq(ds_list_find_value(list_str, 2), "cash");

ds_list_add(list_num, 5);
ds_list_add(list_num, 2);
ds_list_add(list_num, 98);
gtest_assert_eq(ds_list_size(list_num), 3);
gtest_assert_false(ds_list_empty(list_num));

ds_list_sort(list_num, false);
gtest_assert_eq(ds_list_find_value(list_num, 0), 98);
gtest_assert_eq(ds_list_find_value(list_num, 1), 5);
gtest_assert_eq(ds_list_find_value(list_num, 2), 2);

ds_list_sort(list_num, true);
gtest_assert_eq(ds_list_find_value(list_num, 0), 2);
gtest_assert_eq(ds_list_find_value(list_num, 1), 5);
gtest_assert_eq(ds_list_find_value(list_num, 2), 98);

ds_list_replace(list_num, 2, 88);
gtest_assert_eq(ds_list_find_value(list_num, 2), 88);
gtest_assert_eq(ds_list_size(list_num), 3);

ds_list_insert(list_num, 0, 45);
gtest_assert_eq(ds_list_size(list_num), 4);
gtest_assert_eq(ds_list_find_value(list_num, 0), 45);
gtest_assert_eq(ds_list_find_value(list_num, 1), 2);
gtest_assert_eq(ds_list_find_value(list_num, 2), 5);
gtest_assert_eq(ds_list_find_value(list_num, 3), 88);

ds_list_delete(list_num, 0);
gtest_assert_eq(ds_list_size(list_num), 3);
gtest_assert_eq(ds_list_find_value(list_num, 0), 2);
gtest_assert_eq(ds_list_find_value(list_num, 1), 5);
gtest_assert_eq(ds_list_find_value(list_num, 2), 88);

ds_list_clear(list_num);
gtest_assert_true(ds_list_empty(list_num));
gtest_assert_eq(ds_list_size(list_num), 0);
gtest_assert_true(ds_list_exists(list_num));

ds_list_destroy(list_num);
gtest_assert_false(ds_list_exists(list_num));

/// DS Map
///////////////////////////////////////////////

map_str = ds_map_create();
map_num = ds_map_create();
gtest_assert_true(ds_map_exists(map_str));
gtest_assert_true(ds_map_exists(map_num));
gtest_assert_true(ds_map_empty(map_str));
gtest_assert_true(ds_map_empty(map_num));

gtest_assert_true(is_undefined(ds_map_find_first(map_num)));
gtest_assert_true(is_undefined(ds_map_find_last(map_num)));
gtest_assert_true(is_undefined(ds_map_find_next(map_num, "hello")));
gtest_assert_true(is_undefined(ds_map_find_next(map_num, "")));
gtest_assert_true(is_undefined(ds_map_find_previous(map_num, "")));
gtest_assert_true(is_undefined(ds_map_find_value(map_num, "")));

ds_map_add(map_str, "teststr", "testone");
gtest_assert_eq(ds_map_size(map_str), 1);
// GM ds_map is a multimap and allows duplicate keys
// this was tested in GameMaker 8.1
ds_map_add(map_str, "teststr", "testtwo");
gtest_assert_eq(ds_map_size(map_str), 2);
ds_map_add(map_str, "teststr1", "testthree");
ds_map_add(map_str, "teststr2", "testfour");
gtest_assert_eq(ds_map_size(map_str), 4);
gtest_assert_eq(ds_map_find_value(map_str, "teststr2"), "testfour");

ds_map_add(map_num, 0, 50);
ds_map_add(map_num, 0, 50);
ds_map_add(map_num, 2, 50);
gtest_assert_eq(ds_map_size(map_num), 3);
// We still have GM 8.1 replace behavior
ds_map_replace(map_num, 5, 50);
gtest_assert_true(is_undefined(ds_map_find_value(map_num, 5)));
// This is our special function that acts like GMSv1.4 replace
ds_map_overwrite(map_num, 5, 50);
gtest_assert_false(is_undefined(ds_map_find_value(map_num, 5)));
gtest_assert_eq(ds_map_find_value(map_num, 5), 50);

// lmao GM API is so dumb, this should really be called assign
// second it's broke at the time of this writing in GMSv1.4
// GM8.1 maps are multimaps and GMSv1.4 maps are regular maps
// double confirmed by Rusky on Discord/and in Dejavu
ds_map_copy(map_num, map_str);
gtest_assert_eq(ds_map_size(map_num), 4);

ds_map_clear(map_num);
gtest_assert_true(ds_map_empty(map_num));
gtest_assert_eq(ds_map_size(map_num), 0);
gtest_assert_true(ds_map_exists(map_num));

ds_map_destroy(map_num);
gtest_assert_false(ds_map_exists(map_num));

/// DS Stack
///////////////////////////////////////////////

test_stack = ds_stack_create();
test_stack2 = ds_stack_create();
gtest_assert_true(ds_stack_exists(test_stack));
gtest_assert_true(ds_stack_empty(test_stack));
gtest_assert_true(ds_stack_exists(test_stack2));
gtest_assert_true(ds_stack_empty(test_stack2));

ds_stack_push(test_stack,5);
ds_stack_push(test_stack,5);
ds_stack_push(test_stack,60);
gtest_assert_eq(ds_stack_size(test_stack), 3);
gtest_assert_eq(ds_stack_top(test_stack), 60);
ds_stack_push(test_stack2,2);
ds_stack_push(test_stack2,1);
ds_stack_push(test_stack2,0);
ds_stack_push(test_stack2,-5);
ds_stack_push(test_stack2,-3.3);
gtest_assert_eq(ds_stack_size(test_stack2), 5);

ds_stack_copy(test_stack, test_stack2);
gtest_assert_eq(ds_stack_size(test_stack), 5);
gtest_assert_eq(ds_stack_top(test_stack), -3.3);

ds_stack_pop(test_stack);
gtest_assert_eq(ds_stack_size(test_stack), 4);
gtest_assert_eq(ds_stack_top(test_stack), -5);

ds_stack_push(test_stack,999);
ds_stack_push(test_stack,999.9);
gtest_assert_eq(ds_stack_size(test_stack), 6);
gtest_assert_eq(ds_stack_top(test_stack), 999.9);

ds_stack_clear(test_stack);
gtest_assert_true(ds_stack_empty(test_stack));
gtest_assert_eq(ds_stack_size(test_stack), 0);
gtest_assert_true(ds_stack_exists(test_stack));

ds_stack_destroy(test_stack);
gtest_assert_false(ds_stack_exists(test_stack));

/// DS Queue
///////////////////////////////////////////////

test_queue = ds_queue_create();
test_queue2 = ds_queue_create();
gtest_assert_true(ds_queue_exists(test_queue));
gtest_assert_true(ds_queue_empty(test_queue));
gtest_assert_true(ds_queue_exists(test_queue2));
gtest_assert_true(ds_queue_empty(test_queue2));

gtest_assert_true(is_undefined(ds_queue_head(test_queue)));
ds_queue_enqueue(test_queue, 5);
ds_queue_enqueue(test_queue, 6);
ds_queue_enqueue(test_queue, -1);
gtest_assert_eq(ds_queue_head(test_queue),5);
gtest_assert_eq(ds_queue_tail(test_queue),-1);
gtest_assert_eq(ds_queue_size(test_queue),3);

ds_queue_copy(test_queue2, test_queue);
gtest_assert_eq(ds_queue_size(test_queue),3);
gtest_assert_eq(ds_queue_size(test_queue2),3);

gtest_assert_eq(ds_queue_dequeue(test_queue2),5);
gtest_assert_eq(ds_queue_size(test_queue2),2);
gtest_assert_eq(ds_queue_dequeue(test_queue2),6);
gtest_assert_eq(ds_queue_size(test_queue2),1);

ds_queue_enqueue(test_queue2, 101);
ds_queue_enqueue(test_queue2, -101.1);
ds_queue_enqueue(test_queue2, 0);
gtest_assert_eq(ds_queue_size(test_queue2),4);

ds_queue_clear(test_queue);
gtest_assert_true(ds_queue_empty(test_queue));
gtest_assert_eq(ds_queue_size(test_queue), 0);
gtest_assert_true(ds_queue_exists(test_queue));

ds_queue_destroy(test_queue);
gtest_assert_false(ds_queue_exists(test_queue));

game_end();
