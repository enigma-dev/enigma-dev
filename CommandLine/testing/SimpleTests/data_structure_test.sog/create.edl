/// DS List
///////////////////////////////////////////////

list_str = ds_list_create();
list_num = ds_list_create();
gtest_assert_true(ds_list_exists(list_str));
gtest_assert_true(ds_list_exists(list_num));
gtest_assert_true(ds_list_empty(list_str));
gtest_assert_true(ds_list_empty(list_num));

ds_list_add(list_str, "alarm");
ds_list_add(list_str, "bank");
ds_list_add(list_str, "cash");
gtest_assert_eq(ds_list_size(list_str), 3);
gtest_assert_eq(ds_list_find_index(list_str, "alarm"), 0);
gtest_assert_eq(ds_list_find_index(list_str, "bank"), 1);
gtest_assert_eq(ds_list_find_index(list_str, "notfound"), -1);
gtest_assert_false(ds_list_empty(list_str));

list_dup = ds_list_duplicate(list_str);
gtest_assert_eq(ds_list_size(list_dup), 3);
gtest_assert_eq(ds_list_find_value(list_dup, 0), "alarm");
gtest_assert_eq(ds_list_find_value(list_dup, 1), "bank");
gtest_assert_eq(ds_list_find_value(list_dup, 2), "cash");

ds_list_sort(list_str, false);
gtest_assert_eq(ds_list_find_value(list_str, 0), "cash");
gtest_assert_eq(ds_list_find_value(list_str, 1), "bank");
gtest_assert_eq(ds_list_find_value(list_str, 2), "alarm");

ds_list_sort(list_str, true);
gtest_assert_eq(ds_list_find_value(list_str, 0), "alarm");
gtest_assert_eq(ds_list_find_value(list_str, 1), "bank");
gtest_assert_eq(ds_list_find_value(list_str, 2), "cash");

ds_list_delete(list_str, 0, 1);
gtest_assert_eq(ds_list_size(list_str), 1);
gtest_assert_eq(ds_list_find_value(list_str, 0), "cash");
ds_list_add(list_str,"moo");
gtest_assert_eq(ds_list_size(list_str), 2);
gtest_assert_eq(ds_list_find_value(list_str, 1), "moo");
ds_list_delete(list_str, 1, 1);
gtest_assert_eq(ds_list_size(list_str), 1);
gtest_assert_eq(ds_list_find_value(list_str, 0), "cash");

ds_list_add(list_num, 5);
ds_list_add(list_num, 2);
ds_list_add(list_num, 98);
gtest_assert_eq(ds_list_size(list_num), 3);
gtest_assert_eq(ds_list_find_index(list_num, 2), 1);
gtest_assert_eq(ds_list_find_index(list_num, 98), 2);
gtest_assert_eq(ds_list_find_index(list_num, 404), -1);
gtest_assert_false(ds_list_empty(list_num));

ds_list_copy(list_dup, list_num);
gtest_assert_eq(ds_list_size(list_dup), 3);
gtest_assert_eq(ds_list_find_value(list_dup, 0), 5);
gtest_assert_eq(ds_list_find_value(list_dup, 1), 2);
gtest_assert_eq(ds_list_find_value(list_dup, 2), 98);

ds_list_sort(list_num, false);
gtest_assert_eq(ds_list_find_value(list_num, 0), 98);
gtest_assert_eq(ds_list_find_value(list_num, 1), 5);
gtest_assert_eq(ds_list_find_value(list_num, 2), 2);

ds_list_sort(list_num, true);
gtest_assert_eq(ds_list_find_value(list_num, 0), 2);
gtest_assert_eq(ds_list_find_value(list_num, 1), 5);
gtest_assert_eq(ds_list_find_value(list_num, 2), 98);

ds_list_replace(list_num, 2, 88);
gtest_assert_eq(ds_list_find_value(list_num, 2), 88);
gtest_assert_eq(ds_list_size(list_num), 3);

ds_list_insert(list_num, 0, 45);
gtest_assert_eq(ds_list_size(list_num), 4);
gtest_assert_eq(ds_list_find_value(list_num, 0), 45);
gtest_assert_eq(ds_list_find_value(list_num, 1), 2);
gtest_assert_eq(ds_list_find_value(list_num, 2), 5);
gtest_assert_eq(ds_list_find_value(list_num, 3), 88);

ds_list_delete(list_num, 0);
gtest_assert_eq(ds_list_size(list_num), 3);
gtest_assert_eq(ds_list_find_value(list_num, 0), 2);
gtest_assert_eq(ds_list_find_value(list_num, 1), 5);
gtest_assert_eq(ds_list_find_value(list_num, 2), 88);

ds_list_delete(list_num, 1, 2);
gtest_assert_eq(ds_list_size(list_num), 1);
gtest_assert_eq(ds_list_find_value(list_num, 0), 2);

ds_list_clear(list_num);
gtest_assert_true(ds_list_empty(list_num));
gtest_assert_eq(ds_list_size(list_num), 0);
gtest_assert_true(ds_list_exists(list_num));

ds_list_destroy(list_num);
gtest_assert_false(ds_list_exists(list_num));

/// DS Map
///////////////////////////////////////////////

map_str = ds_map_create();
map_num = ds_map_create();
gtest_assert_true(ds_map_exists(map_str));
gtest_assert_true(ds_map_exists(map_num));
gtest_assert_true(ds_map_empty(map_str));
gtest_assert_true(ds_map_empty(map_num));

gtest_assert_true(is_undefined(ds_map_find_first(map_num)));
gtest_assert_true(is_undefined(ds_map_find_last(map_num)));
gtest_assert_true(is_undefined(ds_map_find_next(map_num, "hello")));
gtest_assert_true(is_undefined(ds_map_find_next(map_num, "")));
gtest_assert_true(is_undefined(ds_map_find_previous(map_num, "")));
gtest_assert_true(is_undefined(ds_map_find_value(map_num, "")));

ds_map_add(map_str, "teststr", "testone");
gtest_assert_eq(ds_map_size(map_str), 1);
// GM ds_map is a multimap and allows duplicate keys
// this was tested in GameMaker 8.1
ds_map_add(map_str, "teststr", "testtwo");
gtest_assert_eq(ds_map_size(map_str), 2);
ds_map_add(map_str, "teststr1", "testthree");
ds_map_add(map_str, "teststr2", "testfour");
gtest_assert_eq(ds_map_size(map_str), 4);
gtest_assert_eq(ds_map_find_value(map_str, "teststr2"), "testfour");

map_dup = ds_map_duplicate(map_str);
gtest_assert_eq(ds_map_size(map_dup), 4);
gtest_assert_eq(ds_map_find_value(map_dup, "teststr"), "testone");
gtest_assert_eq(ds_map_find_value(map_dup, "teststr"), "testone");
gtest_assert_eq(ds_map_find_value(map_dup, "teststr1"), "testthree");
gtest_assert_eq(ds_map_find_value(map_dup, "teststr2"), "testfour");

ds_map_add(map_num, 0, 50);
ds_map_add(map_num, 0, 50);
ds_map_add(map_num, 2, 50);
gtest_assert_eq(ds_map_size(map_num), 3);
// We still have GM 8.1 replace behavior
ds_map_replace(map_num, 5, 50);
gtest_assert_false(ds_map_exists(map_num, 5));
gtest_assert_true(is_undefined(ds_map_find_value(map_num, 5)));
// This is our special function that acts like GMSv1.4 replace
ds_map_overwrite(map_num, 5, 6667);
gtest_assert_false(is_undefined(ds_map_find_value(map_num, 5)));
gtest_assert_eq(ds_map_find_value(map_num, 5), 6667);
// Actually test overwriting an existing value
ds_map_overwrite(map_num, 5, 23482348);
gtest_assert_eq(ds_map_find_value(map_num, 5), 23482348);
// Actually test replace too
ds_map_replace(map_num, 5, 78);
gtest_assert_true(ds_map_exists(map_num, 5));
gtest_assert_eq(ds_map_find_value(map_num, 5), 78);

ds_map_delete(map_num,5);
gtest_assert_false(ds_map_exists(map_num, 5));
gtest_assert_true(is_undefined(ds_map_find_value(map_num, 5)));
ds_map_add(map_num,5,50);
gtest_assert_true(ds_map_exists(map_num, 5));
gtest_assert_eq(ds_map_find_value(map_num, 5), 50);

// lmao GM API is so dumb, this should really be called assign
// second it's broke at the time of this writing in GMSv1.4
// GM8.1 maps are multimaps and GMSv1.4 maps are regular maps
// double confirmed by Rusky on Discord/and in Dejavu
ds_map_copy(map_num, map_str);
gtest_assert_eq(ds_map_size(map_num), 4);

ds_map_clear(map_num);
gtest_assert_true(ds_map_empty(map_num));
gtest_assert_eq(ds_map_size(map_num), 0);
gtest_assert_true(ds_map_exists(map_num));

ds_map_destroy(map_num);
gtest_assert_false(ds_map_exists(map_num));

/// DS Stack
///////////////////////////////////////////////

test_stack = ds_stack_create();
test_stack2 = ds_stack_create();
gtest_assert_true(ds_stack_exists(test_stack));
gtest_assert_true(ds_stack_empty(test_stack));
gtest_assert_true(ds_stack_exists(test_stack2));
gtest_assert_true(ds_stack_empty(test_stack2));

ds_stack_push(test_stack,5);
ds_stack_push(test_stack,5);
ds_stack_push(test_stack,60);
gtest_assert_eq(ds_stack_size(test_stack), 3);
gtest_assert_eq(ds_stack_top(test_stack), 60);

stack_dup = ds_stack_duplicate(test_stack);
gtest_assert_eq(ds_stack_size(stack_dup), 3);
gtest_assert_eq(ds_stack_pop(stack_dup), 60);
gtest_assert_eq(ds_stack_pop(stack_dup), 5);
gtest_assert_eq(ds_stack_pop(stack_dup), 5);

ds_stack_push(test_stack2,2);
ds_stack_push(test_stack2,1);
ds_stack_push(test_stack2,0);
ds_stack_push(test_stack2,-5);
ds_stack_push(test_stack2,-3.3);
gtest_assert_eq(ds_stack_size(test_stack2), 5);

ds_stack_copy(test_stack, test_stack2);
gtest_assert_eq(ds_stack_size(test_stack), 5);
gtest_assert_eq(ds_stack_top(test_stack), -3.3);

ds_stack_pop(test_stack);
gtest_assert_eq(ds_stack_size(test_stack), 4);
gtest_assert_eq(ds_stack_top(test_stack), -5);

ds_stack_push(test_stack,999);
ds_stack_push(test_stack,999.9);
gtest_assert_eq(ds_stack_size(test_stack), 6);
gtest_assert_eq(ds_stack_top(test_stack), 999.9);

ds_stack_clear(test_stack);
gtest_assert_true(ds_stack_empty(test_stack));
gtest_assert_eq(ds_stack_size(test_stack), 0);
gtest_assert_true(ds_stack_exists(test_stack));

ds_stack_destroy(test_stack);
gtest_assert_false(ds_stack_exists(test_stack));

/// DS Queue
///////////////////////////////////////////////

test_queue = ds_queue_create();
test_queue2 = ds_queue_create();
gtest_assert_true(ds_queue_exists(test_queue));
gtest_assert_true(ds_queue_empty(test_queue));
gtest_assert_true(ds_queue_exists(test_queue2));
gtest_assert_true(ds_queue_empty(test_queue2));

gtest_assert_true(is_undefined(ds_queue_head(test_queue)));
ds_queue_enqueue(test_queue, 5);
ds_queue_enqueue(test_queue, 6);
ds_queue_enqueue(test_queue, -1);
gtest_assert_eq(ds_queue_head(test_queue),5);
gtest_assert_eq(ds_queue_tail(test_queue),-1);
gtest_assert_eq(ds_queue_size(test_queue),3);

queue_dup = ds_queue_duplicate(test_queue);
gtest_assert_eq(ds_queue_size(queue_dup),3);
gtest_assert_eq(ds_queue_dequeue(queue_dup),5);
gtest_assert_eq(ds_queue_dequeue(queue_dup),6);
gtest_assert_eq(ds_queue_dequeue(queue_dup),-1);

ds_queue_copy(test_queue2, test_queue);
gtest_assert_eq(ds_queue_size(test_queue),3);
gtest_assert_eq(ds_queue_size(test_queue2),3);

gtest_assert_eq(ds_queue_dequeue(test_queue2),5);
gtest_assert_eq(ds_queue_size(test_queue2),2);
gtest_assert_eq(ds_queue_dequeue(test_queue2),6);
gtest_assert_eq(ds_queue_size(test_queue2),1);

ds_queue_enqueue(test_queue2, 101);
ds_queue_enqueue(test_queue2, -101.1);
ds_queue_enqueue(test_queue2, 0);
gtest_assert_eq(ds_queue_size(test_queue2),4);

ds_queue_clear(test_queue);
gtest_assert_true(ds_queue_empty(test_queue));
gtest_assert_eq(ds_queue_size(test_queue), 0);
gtest_assert_true(ds_queue_exists(test_queue));

ds_queue_destroy(test_queue);
gtest_assert_false(ds_queue_exists(test_queue));

/// DS Priority
///////////////////////////////////////////////

test_priority = ds_priority_create();
test_priority2 = ds_priority_create();
gtest_assert_true(ds_priority_exists(test_priority));
gtest_assert_true(ds_priority_empty(test_priority));
gtest_assert_true(ds_priority_exists(test_priority2));
gtest_assert_true(ds_priority_empty(test_priority2));

gtest_assert_true(is_undefined(ds_priority_find_min(test_priority)));
gtest_assert_true(is_undefined(ds_priority_find_max(test_priority)));
gtest_assert_true(is_undefined(ds_priority_find_priority(test_priority, "hello")));
gtest_assert_false(ds_priority_value_exists(test_priority, "hello"));

ds_priority_add(test_priority, "one", 56);
ds_priority_add(test_priority, "two", 0);
ds_priority_add(test_priority, "three", -5);
gtest_assert_eq(ds_priority_size(test_priority), 3);
gtest_assert_eq(ds_priority_find_min(test_priority), "three");
gtest_assert_eq(ds_priority_find_max(test_priority), "one");
gtest_assert_eq(ds_priority_find_priority(test_priority, "one"), 56);
gtest_assert_eq(ds_priority_find_priority(test_priority, "two"), 0);
gtest_assert_true(ds_priority_value_exists(test_priority, "one"));

ds_priority_change_priority(priority_dup, "one", -5000);
gtest_assert_eq(ds_priority_find_priority(test_priority, "one"), -5000);

priority_dup = ds_priority_duplicate(test_priority);
gtest_assert_eq(ds_priority_size(priority_dup), 3);
gtest_assert_eq(ds_priority_delete_max(priority_dup), "two");
gtest_assert_eq(ds_priority_delete_max(priority_dup), "three");
gtest_assert_eq(ds_priority_delete_max(priority_dup), "one");

ds_priority_copy(test_priority2, test_priority);
gtest_assert_eq(ds_priority_size(test_priority2), 3);
gtest_assert_false(ds_priority_empty(test_priority2));

ds_priority_add(test_priority2, "five", 1);
gtest_assert_eq(ds_priority_size(test_priority2), 4);

gtest_assert_eq(ds_priority_delete_max(test_priority2), "five");
gtest_assert_eq(ds_priority_size(test_priority2), 3);
gtest_assert_eq(ds_priority_find_max(test_priority2), "two");

gtest_assert_eq(ds_priority_delete_min(test_priority2), "one");
gtest_assert_eq(ds_priority_size(test_priority2), 2);
gtest_assert_eq(ds_priority_find_min(test_priority2), "three");

ds_priority_add(test_priority2, "six", 101.1);
ds_priority_add(test_priority2, "seven", -969);
ds_priority_add(test_priority2, "eight", 42);
gtest_assert_eq(ds_priority_size(test_priority2), 5);

gtest_assert_false(is_undefined(ds_priority_find_priority(test_priority2, "six")));
ds_priority_delete_value(test_priority2, "six");
gtest_assert_eq(ds_priority_size(test_priority2), 4);
gtest_assert_true(is_undefined(ds_priority_find_priority(test_priority2, "six")));

ds_priority_clear(test_priority);
gtest_assert_true(ds_priority_empty(test_priority));
gtest_assert_eq(ds_priority_size(test_priority), 0);
gtest_assert_true(ds_priority_exists(test_priority));

ds_priority_destroy(test_priority);
gtest_assert_false(ds_priority_exists(test_priority));

/// DS Grid
///////////////////////////////////////////////

test_grid = ds_grid_create(50, 30);
test_grid2 = ds_grid_create(10, 10);
gtest_assert_true(ds_grid_exists(test_grid));
gtest_assert_eq(ds_grid_width(test_grid), 50);
gtest_assert_eq(ds_grid_height(test_grid), 30);
gtest_assert_true(ds_grid_exists(test_grid2));
gtest_assert_eq(ds_grid_width(test_grid2), 10);
gtest_assert_eq(ds_grid_height(test_grid2), 10);

gtest_assert_false(ds_grid_value_exists(test_grid,0,0,50,30,99));
gtest_assert_eq(ds_grid_value_x(test_grid,0,0,50,30,99), 0);
gtest_assert_eq(ds_grid_value_y(test_grid,0,0,50,30,99), 0);

gtest_assert_false(ds_grid_value_disk_exists(test_grid,5,5,2,99));
gtest_assert_eq(ds_grid_value_disk_x(test_grid,5,5,2,99), 0);
gtest_assert_eq(ds_grid_value_disk_y(test_grid,5,5,2,99), 0);

gtest_assert_eq(ds_grid_get(test_grid, 0, 0), 0);
gtest_assert_eq(ds_grid_get(test_grid, 5, 5), 0);
ds_grid_set(test_grid, 5, 5, 99);
gtest_assert_eq(ds_grid_get(test_grid, 5, 5), 99);

gtest_assert_true(ds_grid_value_exists(test_grid,2,2,50,30,99));
gtest_assert_eq(ds_grid_value_x(test_grid,0,0,50,30,99), 5);
gtest_assert_eq(ds_grid_value_y(test_grid,0,0,50,30,99), 5);

gtest_assert_false(ds_grid_value_exists(test_grid,0,0,3,3,99));
gtest_assert_eq(ds_grid_value_x(test_grid,0,0,3,3,99), 0);
gtest_assert_eq(ds_grid_value_y(test_grid,0,0,3,3,99), 0);

ds_grid_add(test_grid, 5, 5, 3);
gtest_assert_eq(ds_grid_get(test_grid, 5, 5), 102);
ds_grid_multiply(test_grid, 5, 5, 2);
gtest_assert_eq(ds_grid_get(test_grid, 5, 5), 204);

ds_grid_set_region(test_grid, 5, 5, 8, 8, -55);
for (var j = 5; j < 9; ++j)
  for (var i = 5; i < 9; ++i)
    gtest_assert_eq(ds_grid_get(test_grid, i, j), -55);

ds_grid_add_region(test_grid, 5, 5, 8, 8, 5);
for (var j = 5; j < 9; ++j)
  for (var i = 5; i < 9; ++i)
    gtest_assert_eq(ds_grid_get(test_grid, i, j), -50);

ds_grid_multiply_region(test_grid, 5, 5, 8, 8, -1);
for (var j = 5; j < 9; ++j)
  for (var i = 5; i < 9; ++i)
    gtest_assert_eq(ds_grid_get(test_grid, i, j), 50);

ds_grid_set_grid_region(test_grid2, test_grid, 5, 5, 8, 8, 1, 2);
for (var j = 2; j < 6; ++j)
  for (var i = 1; i < 5; ++i)
    gtest_assert_eq(ds_grid_get(test_grid2, i, j), 50);

ds_grid_add_grid_region(test_grid2, test_grid, 5, 5, 8, 8, 1, 2);
for (var j = 2; j < 6; ++j)
  for (var i = 1; i < 5; ++i)
    gtest_assert_eq(ds_grid_get(test_grid2, i, j), 100);

ds_grid_multiply_grid_region(test_grid2, test_grid, 5, 5, 8, 8, 1, 2);
for (var j = 2; j < 6; ++j)
  for (var i = 1; i < 5; ++i)
    gtest_assert_eq(ds_grid_get(test_grid2, i, j), 5000);

ds_grid_resize(test_grid2, 25, 5);
gtest_assert_eq(ds_grid_width(test_grid2), 25);
gtest_assert_eq(ds_grid_height(test_grid2), 5);

gtest_assert_ne(ds_grid_get(test_grid2, 21, 0), 32);
ds_grid_set(test_grid2, 21, 0, 32);
gtest_assert_eq(ds_grid_get(test_grid2, 21, 0), 32);

grid_dup = ds_grid_duplicate(test_grid);
gtest_assert_eq(ds_grid_width(grid_dup), 50);
gtest_assert_eq(ds_grid_height(grid_dup), 30);
for (var j = 5; j < 9; ++j)
  for (var i = 5; i < 9; ++i)
    gtest_assert_eq(ds_grid_get(grid_dup, i, j), 50);

ds_grid_copy(test_grid2, test_grid);
gtest_assert_eq(ds_grid_width(test_grid2), 50);
gtest_assert_eq(ds_grid_height(test_grid2), 30);
gtest_assert_ne(ds_grid_get(test_grid2, 21, 0), 32);

ds_grid_clear(test_grid2, 100);
for (var j = 0; j < 30; ++j)
  for (var i = 0; i < 50; ++i)
    gtest_assert_eq(ds_grid_get(test_grid2, i, j), 100);

ds_grid_set(test_grid2, 0, 0, -3);
ds_grid_set(test_grid2, 1, 0, 53);
ds_grid_set(test_grid2, 2, 0, 786.235);
ds_grid_set(test_grid2, 0, 1, -1001.735);
ds_grid_set(test_grid2, 1, 1, 4);
ds_grid_set(test_grid2, 2, 1, 1);
ds_grid_set(test_grid2, 0, 2, 45);
ds_grid_set(test_grid2, 1, 2, 0);
ds_grid_set(test_grid2, 2, 2, -6);

// whole grid
gtest_assert_eq(ds_grid_get_min(test_grid2, 0, 0, 2, 2), -1001.735);
gtest_assert_eq(ds_grid_get_max(test_grid2, 0, 0, 2, 2), 786.235);
gtest_assert_eq(ds_grid_get_sum(test_grid2, 0, 0, 2, 2), -121.5);
gtest_assert_eq(ds_grid_get_mean(test_grid2, 0, 0, 2, 2), -13.5);

// middle column
gtest_assert_eq(ds_grid_get_min(test_grid2, 1, 0, 1, 2), 0);
gtest_assert_eq(ds_grid_get_max(test_grid2, 1, 0, 1, 2), 53);
gtest_assert_eq(ds_grid_get_sum(test_grid2, 1, 0, 1, 2), 57);
gtest_assert_eq(ds_grid_get_mean(test_grid2, 1, 0, 1, 2), 19);

// middle row
gtest_assert_eq(ds_grid_get_min(test_grid2, 0, 1, 2, 1), -1001.735);
gtest_assert_eq(ds_grid_get_max(test_grid2, 0, 1, 2, 1), 4);
gtest_assert_eq(ds_grid_get_sum(test_grid2, 0, 1, 2, 1), -996.735);
gtest_assert_eq(ds_grid_get_mean(test_grid2, 0, 1, 2, 1), -332.245);

ds_grid_destroy(test_grid);
gtest_assert_false(ds_grid_exists(test_grid));

/// WE'RE DONE!!!
game_end();
