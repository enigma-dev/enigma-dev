/// BINARY FILES
var bin_path = "file_bin_test.bin";

// BINARY WRITE
var bin_write;
bin_write = file_bin_open(bin_path,1);
file_bin_write_byte(bin_write, 3);
file_bin_write_byte(bin_write, 255);
file_bin_write_byte(bin_write, 7);
gtest_expect_eq(file_bin_size(bin_write),3);
gtest_expect_eq(file_bin_position(bin_write),3);
gtest_expect_eq(file_bin_position(bin_write),file_bin_size(bin_write));
file_bin_seek(bin_write,0);
gtest_expect_eq(file_bin_size(bin_write),3);
gtest_expect_eq(file_bin_position(bin_write),0);
gtest_expect_ne(file_bin_position(bin_write),file_bin_size(bin_write));
file_bin_write_byte(bin_write,99);
file_bin_write_byte(bin_write,-1); // underflows to 255
file_bin_write_byte(bin_write,256); // overflows to 0
gtest_expect_eq(file_bin_size(bin_write),3);
gtest_expect_eq(file_bin_position(bin_write),3);
gtest_expect_eq(file_bin_position(bin_write),file_bin_size(bin_write));
file_bin_close(bin_write);

// BINARY READ
var bin_read;
bin_read = file_bin_open(bin_path,0);
gtest_expect_eq(file_bin_read_byte(bin_read),99);
gtest_expect_eq(file_bin_read_byte(bin_read),255);
gtest_expect_eq(file_bin_read_byte(bin_read),0);
file_bin_close(bin_read);

// BINARY READ & WRITE
var bin_read_write;
bin_read_write = file_bin_open(bin_path,2);
gtest_expect_eq(file_bin_size(bin_read_write),3);
gtest_expect_eq(file_bin_position(bin_read_write),0);
gtest_expect_ne(file_bin_position(bin_read_write),file_bin_size(bin_read_write));
file_bin_seek(bin_read_write,file_bin_size(bin_read_write));
gtest_expect_eq(file_bin_size(bin_read_write),3);
gtest_expect_eq(file_bin_position(bin_read_write),3);
gtest_expect_eq(file_bin_position(bin_read_write),file_bin_size(bin_read_write));
file_bin_rewrite(bin_read_write);
gtest_expect_eq(file_bin_size(bin_read_write),0);
gtest_expect_eq(file_bin_position(bin_read_write),0);
gtest_expect_eq(file_bin_position(bin_read_write),file_bin_size(bin_read_write));
file_bin_write_byte(bin_read_write,1);
file_bin_write_byte(bin_read_write,2);
file_bin_write_byte(bin_read_write,3);
file_bin_seek(bin_read_write,0);
gtest_expect_eq(file_bin_size(bin_read_write),3);
gtest_expect_eq(file_bin_position(bin_read_write),0);
gtest_expect_eq(file_bin_read_byte(bin_read_write),1);
gtest_expect_eq(file_bin_read_byte(bin_read_write),2);
gtest_expect_eq(file_bin_read_byte(bin_read_write),3);
file_bin_close(bin_read_write);

/// TEXT FILES
var text_path = "file_text_test.txt";

// TEXT WRITING
var text_write;
text_write = file_text_open_write(text_path);
file_text_write_string(text_write, "apple");
file_text_write_string(text_write, " pear");
file_text_write_string(text_write, ' ');
file_text_write_string(text_write, "bear");
file_text_writeln(text_write);
file_text_write_real(text_write, 0);
file_text_write_real(text_write, -1);
file_text_write_real(text_write, 253);
file_text_writeln(text_write);
file_text_write_real(text_write, 0.56932);
file_text_write_real(text_write, -59.003456);
file_text_write_real(text_write, 253.98997721);
file_text_writeln(text_write);
file_text_close(text_write);

// TEXT APPEND
var text_append;
text_append = file_text_open_append(text_path);
file_text_write_real(text_append, 2);
file_text_write_real(text_append, 5);
file_text_write_string(text_append, " b");
file_text_writeln(text_append);
file_text_close(text_append);

// TEXT READ
var text_read;
text_read = file_text_open_read(text_path);
gtest_assert_false(file_text_eof(text_read));
gtest_assert_false(file_text_eoln(text_read));
gtest_expect_eq(file_text_read_string(text_read),"apple pear bear");
gtest_assert_false(file_text_eof(text_read));
gtest_assert_true(file_text_eoln(text_read));
file_text_readln(text_read);
gtest_expect_eq(file_text_read_real(text_read),0);
gtest_expect_eq(file_text_read_real(text_read),-1);
gtest_expect_eq(file_text_read_real(text_read),253);
gtest_assert_false(file_text_eof(text_read));
gtest_assert_true(file_text_eoln(text_read));
file_text_readln(text_read);
file_text_read_real(text_read) // TODO test epsilon
file_text_read_real(text_read) // TODO test epsilon
file_text_read_real(text_read) // TODO test epsilon
file_text_readln(text_read);
gtest_expect_eq(file_text_read_real(text_read),2);
gtest_expect_eq(file_text_read_string(text_read)," 5 b");
file_text_readln(text_read);
// Unix convention/end of file line is empty
gtest_assert_false(file_text_eof(text_read));
gtest_assert_true(file_text_eoln(text_read));
file_text_readln(text_read);
gtest_assert_true(file_text_eof(text_read));
gtest_assert_true(file_text_eoln(text_read));
file_text_close(text_read);

/// We're done!
game_end();
