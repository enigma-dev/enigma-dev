// put something in the draw batch
draw_set_color(c_black);
draw_rectangle(dx-20,dy-20,dx+20,dy+20,false);
// ensure user-submit flushes the batch first
// in which case the diamond should occlude the rect
vertex_submit(vb_diamond,pr_trianglestrip);

draw_set_color(c_yellow);
draw_rectangle(50, 50, 600, 400, true);
draw_set_color(c_olive);
draw_circle(275, 175, 200, false);
draw_set_color(c_red);
draw_ellipse(100, 100, 300, 200, false);
draw_set_color(c_green);
draw_ellipse(350, 100, 550, 200, false);
draw_set_color(c_fuchsia);
draw_triangle(300, 300, 500, 300, 400, 480, false);

// test using current color & alpha per-vertex on 2D primitive
draw_set_color(c_yellow);
draw_primitive_begin(pr_trianglelist);
draw_set_color(c_red);
draw_vertex(80, 80);
draw_set_color(c_green);
draw_vertex_color(320, 80, c_black, 0.5);
draw_set_color(c_blue);
draw_vertex(80, 220);
draw_set_color(c_orange);
draw_primitive_end();
draw_set_color(c_white);

// test using current color & alpha per-vertex on 3D primitive
draw_set_color(c_yellow);
d3d_primitive_begin(pr_trianglelist);
draw_set_color(c_black);
draw_set_alpha(0.5);
d3d_vertex(320, 80, 0);
draw_set_alpha(1);
draw_set_color(c_green);
d3d_vertex_color(320, 220, 0, c_red, 1);
draw_set_color(c_blue);
d3d_vertex(80, 220, 0);
draw_set_color(c_orange);
d3d_primitive_end();
draw_set_color(c_white);

// flush immediately to ensure that a 2D and 3D primitive
// render correctly when flushed from the same batch
draw_batch_flush();

// stretched sprite should ignore origin
draw_sprite_stretched(spr,0,0,0,25,25);
draw_sprite_stretched_ext(spr,0,25,0,25,25,c_red,0.5);

// draw duplicate sprite
draw_sprite(spr2,0,0,25);

// surface tests
draw_surface(surf_test,0,room_height-32);
draw_sprite(surf_spr,0,32,room_height-32);
draw_background(surf_back,0,room_height-64);
var surf_dupx, surf_dupy;
surf_dupx = 32;
surf_dupy = room_height-64;
draw_surface(surf_dup,surf_dupx,surf_dupy);

// test sprite subimage index modulo
for (var i = 0; i < 6; ++i) {
	var texid, texidNegative;
	// offset +1 and show 231231 so we don't mix up showing the actual texture which is 123
	texid = sprite_get_texture(sprNumbers, i+1);
	// also test the negative subimage indexes which should just be the current image_index
	sprite_index = sprNumbers;
	image_index = i;
	texidNegative = sprite_get_texture(sprNumbers, -1);
	var xx, yy, sz;
	sz = 8;
	xx = 150 + i*sz;
	yy = 250;
	draw_primitive_begin_texture(pr_trianglestrip, texid);
	draw_vertex_texture(xx, yy, 0, 0);
	draw_vertex_texture(xx, yy+sz, 0, 1);
	draw_vertex_texture(xx+sz, yy, 1, 0);
	draw_vertex_texture(xx+sz, yy+sz, 1, 1);
	draw_primitive_end();
	yy += sz;
	draw_primitive_begin_texture(pr_trianglestrip, texidNegative);
	draw_vertex_texture(xx, yy, 0, 0);
	draw_vertex_texture(xx, yy+sz, 0, 1);
	draw_vertex_texture(xx+sz, yy, 1, 0);
	draw_vertex_texture(xx+sz, yy+sz, 1, 1);
	draw_primitive_end();
}

// screen copy tests
if (screen_spr == -1) {
	// test reading screen pixels just once
	gtest_expect_eq(draw_getpixel(surf_dupx+2,surf_dupy+2),c_red);
	gtest_expect_eq(draw_getpixel(surf_dupx+2,surf_dupy+10),c_green);
	gtest_expect_eq(draw_getpixel(surf_dupx+16,surf_dupy+16),c_blue);

	screen_spr = sprite_create_from_screen(0,room_height-64,32,32,false,false,false,0,0);
}
if (screen_bkg == -1) {
	screen_bkg = background_create_from_screen(0,room_height-32,32,32,false,false);
}
draw_sprite(screen_spr,0,64,room_height-64);
draw_background(screen_bkg,64,room_height-32);
