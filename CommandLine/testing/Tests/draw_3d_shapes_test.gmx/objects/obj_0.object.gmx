<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>test_texture = background_get_texture(bkg_test);&#13;
d3d_start();&#13;
d3d_set_hidden(true);&#13;
d3d_set_culling(false);&#13;
size = 20;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_projection_ortho(0, 0, room_width, room_height, 0);

for (var y = 0; y &lt; 6; y += 1) {
	var yy = 25 + y * 45;

	for (var i = 0; i &lt; 4; i += 1) {
		// Show all sides around the x-axis
		d3d_transform_set_rotation_x(i * 90);
		d3d_transform_add_translation(25 + i * 45, yy, 0);
		d3d_draw_shape(y, size, test_texture);
		// Show all sides around the y-axis
		d3d_transform_set_rotation_y(i * 90);
		d3d_transform_add_translation(30 + (i + 4) * 45, yy, 0);
		d3d_draw_shape(y, size, test_texture);
	}
}
d3d_transform_set_identity();

// test depth comparison function to ensure less than or equal
d3d_transform_set_translation(0, room_height - 70, 0);
draw_set_color(c_blue);
d3d_draw_floor(10, 10, 1, 60, 60, 1, -1, 1, 1);
draw_set_color(c_red);
d3d_draw_floor(20, 20, 0, 50, 50, 0, -1, 1, 1);
draw_set_color(c_green);
d3d_draw_floor(30, 30, 0, 40, 40, 0, -1, 1, 1);
draw_set_color(c_black);
d3d_draw_floor(0, 0, 2, 70, 70, 2, -1, 1, 1);
draw_set_color(c_white);
d3d_transform_set_identity();</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
