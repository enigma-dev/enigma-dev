# This file contains a list of all events in ENIGMA and the order in which they
# are executed.
#
# By "contains," I actually mean to imply "dictates." This file will let you
# re-order events, change the behavior of existing events, and even define new
# events with new behaviours, so long as the IDE supports this file.
#
# This file contains all information necessary to translate events from game
# files (such as EGM, GMK, GM6, and GMX) into working events within the ENIGMA
# engine. Event information not detailed in this file can be considered
# auxiliary (eg, offering a key picker for keyboard constants instead of a
# dropdown or combobox).
#
# That said, DO NOT MODIFY THE CONTENTS OF THIS FILE, UNLESS YOU KNOW WHAT
# YOU'RE DOING. Modifying this file CAN screw up ENIGMA's behavior.
#

%e-yaml
---

events:
  - id: GameStart
    name: "Game Start"
    description: "Start of the game."
    type: TriggerAll

  - id: WindowClose
    name: "Window Close"
    description: "Window was closed."
    type: TriggerAll

  - id: ImageLoaded
    name: "Image Loaded"
    description: "Image finished loading."
    type: TriggerAll

  - id: SoundLoaded
    name: "Sound Loaded"
    description: "Sound finished loading."
    type: TriggerAll

  - id: HTTP
    name: "HTTP"
    description: "Callback from one of the http_ functions, such as `http_post_string`."
    type: TriggerAll

  - id: Dialog
    name: "Dialog"
    description: "Dialog resolved"
    type: TriggerAll

  - id: IAP
    name: "In App Purchase"
    description: "In-App purchase"
    type: TriggerAll

  - id: Cloud
    name: "Cloud"
    description: "Callback from one of the cloud_ functions, such as `cloud_synchronise`."
    type: TriggerAll

  - id: Networking
    name: "Networking"
    description: "Network traffic detected."
    type: TriggerAll

  - id: Steam
    name: "Steam"
    description: "Callback from one of the Steam API functions."
    type: TriggerAll

  - id: Social
    name: "Social"
    description: "Callback from one of the Social API functions."
    type: TriggerAll

  - id: RoomStart
    name: "Room Start"
    description: "New room loaded."
    type: TriggerAll

  - id: Create
    name: "Create"
    description: "Instance constructor (called when the instance is first created)."
    type: TriggerOnce

  - id: Destroy
    name: "Destroy"
    description: "Instance destructor (called as the instance is destroyed)."
    type: TriggerOnce

  - id: BeginStep
    name: "Begin Step"
    description: "The first step event executed each frame."
    group: "Step"
    constant: |
      {
        xprevious = x;
        yprevious = y;
        if (sprite_index != -1) {
          int imgnum = image_number;  // Special sauce happens here
          image_index = fmod(image_index + image_speed + imgnum, imgnum);
        }
      }

  - id: Alarm
    name: "Alarm %1"
    type: Stacked
    parameters:
      - integer
    group: Alarm
    subcheck: |
      {
        alarm[%1] = (int) alarm[%1];
        return alarm[%1] < 0 ? false : !((int)--alarm[%1]);
      }

  - id: Keyboard
    name: "Keyboard %1"
    description: "A key was pressed or is being held."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each key.
    parameters:
      - Key
    supercheck: |
      keyboard_check(%1)

  - id: KeyPressed
    name: "Key Pressed %1"
    description: "A key was pressed."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each key.
    parameters:
      - Key
    supercheck: |
      keyboard_check_pressed(%1)

  - id: KeyReleased
    name: "Key Released %1"
    description: "A key was pressed."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each key.
    parameters:
      - Key
    supercheck: |
      keyboard_check_pressed(%1)

  - id: MouseButton
    name: "Mouse Button %1"
    description: "A mouse button is pressed or held and the mouse is hovering this instance."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each button.
    parameters:
      - MouseButton
    supercheck: |
      mouse_check_button(%1)
    subcheck: |
      position_meeting(mouse_x, mouse_y, id)

  - id: MousePressed
    name: "Mouse Button Pressed %1"
    description: "A mouse button was pressed while hovering this instance."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each button.
    parameters:
      - MouseButton
    supercheck: |
      mouse_check_button_pressed(%1)
    subcheck: |
      position_meeting(mouse_x, mouse_y, id)

  - id: MouseReleased
    name: "Mouse Button Released %1"
    description: "A mouse button was released while hovering this instance."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each button.
    parameters:
      - MouseButton
    supercheck: |
      mouse_check_button_pressed(%1)
    subcheck: |
      position_meeting(mouse_x, mouse_y, id)

  - id: GlobalMouseButton
    name: "Global Mouse Button %1"
    description: "A mouse button was pressed or is being held."
    type: Specialized  # We want the event loop to handle checking each button.
    parameters:
      - MouseButton
    supercheck: |
      mouse_check_button(%1)

  - id: GlobalMousePressed
    name: "Global Mouse Button Pressed %1"
    description: "A mouse button was pressed."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each button.
    parameters:
      - MouseButton
    supercheck: |
      mouse_check_button_pressed(%1)

  - id: GlobalMouseReleased
    name: "Global Mouse Button Released %1"
    description: "A mouse button was released."
    group: "Input"
    type: Specialized  # We want the event loop to handle checking each button.
    parameters:
      - MouseButton
    supercheck: |
      mouse_check_button_pressed(%1)

  - id: MouseWheelUp
    name: "Mouse Wheel Up"
    description: "Mouse scroll wheel was rotated upwards. See `mouse_vscrolls`."
    supercheck: |
      mouse_vscrolls > 0

  - id: MouseWheelDown
    name: "Mouse Wheel Down"
    description: "Mouse scroll wheel was rotated downwards. See `mouse_vscrolls`."
    supercheck: |
      mouse_vscrolls < 0

  - id: MouseEnterWindow
    name: "Mouse Enter Window"
    description:  "Mouse has entered the window."
    locals: bool $innowEnter = false;
    subcheck: |
      {
        const bool wasin = $innowEnter;
        $innowEnter = position_meeting(mouse_x, mouse_y, id);
        return !(!$innowEnter or wasin);
      }

  - id: MouseLeaveWindow
    name: "Mouse Leave Window"
    description: "Mouse has left the window."
    locals: |
      bool $innowLeave = false;
    subcheck: |
      {
        const bool wasin = $innowLeave;
        $innowLeave = position_meeting(mouse_x, mouse_y, id);
        return !($innowLeave or !wasin);
      }

  - id: Step
    name: "Step"
    group: "Step"
    description: "Standard step event executed after begin step and input handling."
    constant: |
      if (timeline_running && timeline_speed != 0) {
        advance_curr_timeline();
      }

  - id: LocalSweep
    name: "Locals sweep"
    description: "Internal event to update local variables."
    constant: |
      enigma::propagate_locals(this);

  - id: PathEnd
    name: "Path End"
    description: "Instance has reached the endpoint of a path."
    supercheck: "false" # TODO: Paths are not yet implemented.

  - id: OutsideRoom
    name: "Outside Room"
    description: "Instance has move outside the room's bounds."
    subcheck: |
      (bbox_right < 0)  || (bbox_left > room_width) ||
      (bbox_bottom < 0) || (bbox_top > room_height)

  - id: InsideRoom
    name: "Inside Room"
    description: "Instance has moved inside the room's bounds."
    subcheck: |
      (bbox_left < 0) || (bbox_right > room_width) ||
      (bbox_top < 0)  || (bbox_bottom > room_height)

  - id: OutsideView
    name: "Outside View %1"
    description: "Instance has moved outside of the view's bounds."
    type: Stacked
    parameters:
      - integer
    subcheck: |
      view_enabled && !view_visible[%1] && (
        (bbox_right  < view_xview[%1])                  ||
        (bbox_left   > view_xview[%1] + view_wview[%1]) ||
        (bbox_bottom < view_yview[%1])                  ||
        (bbox_top    > view_yview[%1] + view_hview[%1])
      )

  - id: InsideView
    name: "Inside View %1"
    description: "Instance has moved inside of the view's bounds."
    type: Stacked
    parameters:
      - integer
    subcheck: |
      view_enabled && view_visible[%1] && (
        (bbox_right  < view_xview[%1])                  ||
        (bbox_left   > view_xview[%1] + view_wview[%1]) ||
        (bbox_bottom < view_yview[%1])                  ||
        (bbox_top    > view_yview[%1] + view_hview[%1])
      )

  - id: NoMoreLives
    name: "No More Lives"
    description: "Lives variable has dropped to 0."
    supercheck: |
      enigma::update_lives_status_and_return_zeroless()

  - id: NoMoreHealth
    name: "No More Health"
    description: "Health variable has dropped to 0."
    type: Specialized
    locals: "bool $out_of_health = 0;"
    subcheck: |
      {
        bool OoH = $out_of_health;
        $out_of_health = (health <= 0);
        return $out_of_health && !OoH;
      }

  - id: BeforeCollisionAutomaticCollisionHandling
    name: "Pre-collision automatic collision handling."
    description: "Internal event to update collision stuff"
    type: Inline
    instead: |
      enigma::perform_callbacks_before_collision_event();

  - id: Collision
    name: "Collision %1"
    description: "Instance is colliding (overlapping) with another object."
    group: "Collisions"
    type: Stacked
    parameters:
      - object
    # supercheck: |
    #   instance_number(%1)
    subcheck: |
      enigma::place_meeting_inst(x, y, %1)
    dispatcher: |
      for (enigma::iterator it = enigma::fetch_inst_iter_by_int(%1); it; ++it) {
        int $$$internal$$$ = %1;
        instance_other = *it;
        if (enigma::place_meeting_inst(x,y,instance_other->id)) {
          if (enigma::glaccess(int(other))->solid &&
              enigma::place_meeting_inst(x,y,instance_other->id)) {
            x = xprevious;
            y = yprevious;
          }
          %event();
          if (enigma::glaccess(int(other))->solid) {
            x += hspeed;
            y += vspeed;
            if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
              x = xprevious;
              y = yprevious;
            }
          }
        }
      }

  - id: EndStep
    name: "End Step"
    description: "The last of the step events."
    group: "Step"
    constant: |
      {
        if (timeline_running && timeline_loop && timeline_speed != 0)
          loop_curr_timeline();
      }

  - id: ParticleSystemsUpdate
    name: "Particle systems update."
    description: "Internal event to update particles"
    type: Inline
    instead: |
      enigma::perform_callbacks_particle_updating();

  - id: Draw
    name: "Draw"
    description: "Draw inside the current viewport."
    group: "Draw"
    subcheck: "visible"
    iteratordeclare: "/* Draw is handled by depth */"
    iteratorinitialize: "/* Draw is initialized in the constructor */"
    iteratorremove: "depth.remove();"
    iteratordelete: "/* Draw event will destruct with this */"
    default: |
      if (visible && sprite_index != -1) {
        draw_sprite_ext(sprite_index, image_index, x, y,
                        image_xscale, image_yscale, image_angle,
                        image_blend, image_alpha);
      }
    instead: |
      // We never want to iterate draw; we let screen_redraw() handle it.
      if (automatic_redraw) screen_redraw();

  - id: DrawGUI
    name: "Draw GUI"
    description: "Draw directly on top the window, ignoring any viewports."
    group: "Draw"
    iteratordeclare: "/* DrawGUI is handled by depth */"
    iteratorinitialize: "++enigma::gui_used;"
    iteratorremove: "--enigma::gui_used;"
    iteratordelete: "/* Nothing to do for DrawGUI */"
    subcheck: "visible"

  - id: WindowResize
    name: "Window Resize"
    description: "Window size has changed."
    type: TriggerAll

  - id: AnimationEnd
    name: "Animation End"
    description: "Instance sprite has reached the last subimage."
    subcheck: |
      !(image_index + image_speed < sprite_get_number(sprite_index))

  - id: RoomEnd
    name: "Room End"
    description: "The current room has changed."
    type: TriggerAll

  - id: GameEnd
    name: "Game End"
    description: "Game is ending."
    type: TriggerAll

  - id: User
    name: "User %1"
    description: "Custom user event. Invoked manually."
    type: TriggerOnce
    parameters:
      - string

  - id: Joystick.Axis
    name: "Joystick %1 Axis %2"
    description: "A joystick button is pressed or held"
    group: "Input"
    type: Specialized
    parameters:
      - integer
      - JoystickButton
    supercheck: "false" # TODO: not implemented yet

  - id: Joystick.Button
    name: "Joystick %1 Button %2"
    description: "A joystick button is pressed or held"
    group: "Input"
    type: Specialized
    parameters:
      - integer
      - JoystickButton
    supercheck: "false" # TODO: not implemented yet

# These are definitions of constants used in the above.
aliases:
  # Keyboard Aliases
  key:
    anykey:      {value: 1,   spelling: "vk_anykey"}
    nokey:       {value: 0,   spelling: "vk_nokey"}
    left:        {value: 37,  spelling: "vk_left"}
    right:       {value: 39,  spelling: "vk_right"}
    up:          {value: 38,  spelling: "vk_up"}
    down:        {value: 40,  spelling: "vk_down"}
    tab:         {value: 9,   spelling: "vk_tab"}
    enter:       {value: 13,  spelling: "vk_enter"}
    shift:       {value: 16,  spelling: "vk_shift"}
    control:     {value: 17,  spelling: "vk_control"}
    alt:         {value: 18,  spelling: "vk_alt"}
    space:       {value: 32,  spelling: "vk_space"}
    numpad0:     {value: 96,  spelling: "vk_numpad0"}
    numpad1:     {value: 97,  spelling: "vk_numpad1"}
    numpad2:     {value: 98,  spelling: "vk_numpad2"}
    numpad3:     {value: 99,  spelling: "vk_numpad3"}
    numpad4:     {value: 100, spelling: "vk_numpad4"}
    numpad5:     {value: 101, spelling: "vk_numpad5"}
    numpad6:     {value: 102, spelling: "vk_numpad6"}
    numpad7:     {value: 103, spelling: "vk_numpad7"}
    numpad8:     {value: 104, spelling: "vk_numpad8"}
    numpad9:     {value: 105, spelling: "vk_numpad9"}
    multiply:    {value: 106, spelling: "vk_multiply"}
    add:         {value: 107, spelling: "vk_add"}
    subtract:    {value: 109, spelling: "vk_subtract"}
    decimal:     {value: 110, spelling: "vk_decimal"}
    divide:      {value: 111, spelling: "vk_divide"}
    f1:          {value: 112, spelling: "vk_f1"}
    f2:          {value: 113, spelling: "vk_f2"}
    f3:          {value: 114, spelling: "vk_f3"}
    f4:          {value: 115, spelling: "vk_f4"}
    f5:          {value: 116, spelling: "vk_f5"}
    f6:          {value: 117, spelling: "vk_f6"}
    f7:          {value: 118, spelling: "vk_f7"}
    f8:          {value: 119, spelling: "vk_f8"}
    f9:          {value: 120, spelling: "vk_f9"}
    f10:         {value: 121, spelling: "vk_f10"}
    f11:         {value: 122, spelling: "vk_f11"}
    f12:         {value: 123, spelling: "vk_f12"}
    backspace:   {value: 8,   spelling: "vk_backspace"}
    escape:      {value: 27,  spelling: "vk_escape"}
    pageup:      {value: 33,  spelling: "vk_pageup"}
    pagedown:    {value: 34,  spelling: "vk_pagedown"}
    end:         {value: 35,  spelling: "vk_end"}
    home:        {value: 36,  spelling: "vk_home"}
    insert:      {value: 45,  spelling: "vk_insert"}
    delete:      {value: 46,  spelling: "vk_delete"}
  # These are for check_direct only
    lshift:      {value: 160, spelling: "vk_lshift"}
    rshift:      {value: 161, spelling: "vk_rshift"}
    lcontrol:    {value: 162, spelling: "vk_lcontrol"}
    rcontrol:    {value: 163, spelling: "vk_rcontrol"}
    lalt:        {value: 164, spelling: "vk_lalt"}
    ralt:        {value: 165, spelling: "vk_ralt"}
  # This one's Windows only
    printscreen: {value: 42,  spelling: "vk_printscreen"}
  # These are ENIGMA-only
    caps:        {value: 20,  spelling: "vk_caps"}
    scroll:      {value: 145, spelling: "vk_scroll"}
    pause:       {value: 19,  spelling: "vk_pause"}
    lsuper:      {value: 91,  spelling: "vk_lsuper"}
    rsuper:      {value: 92,  spelling: "vk_rsuper"}
  # These are a little annoying, but make codegen easier.
    a:  {value: 65, spelling: "'A'"}
    b:  {value: 66, spelling: "'B'"}
    c:  {value: 67, spelling: "'C'"}
    d:  {value: 68, spelling: "'D'"}
    e:  {value: 69, spelling: "'E'"}
    f:  {value: 70, spelling: "'F'"}
    g:  {value: 71, spelling: "'G'"}
    h:  {value: 72, spelling: "'H'"}
    i:  {value: 73, spelling: "'I'"}
    j:  {value: 74, spelling: "'J'"}
    k:  {value: 75, spelling: "'K'"}
    l:  {value: 76, spelling: "'L'"}
    m:  {value: 77, spelling: "'M'"}
    n:  {value: 78, spelling: "'N'"}
    o:  {value: 79, spelling: "'O'"}
    p:  {value: 80, spelling: "'P'"}
    q:  {value: 81, spelling: "'Q'"}
    r:  {value: 82, spelling: "'R'"}
    s:  {value: 83, spelling: "'S'"}
    t:  {value: 84, spelling: "'T'"}
    u:  {value: 85, spelling: "'U'"}
    v:  {value: 86, spelling: "'V'"}
    w:  {value: 87, spelling: "'W'"}
    x:  {value: 88, spelling: "'X'"}
    y:  {value: 89, spelling: "'Y'"}
    z:  {value: 90, spelling: "'Z'"}

  # Mouse Button Aliases
  mousebutton:
    any:    {value: -1, spelling: "mb_any"}
    none:   {value:  0, spelling: "mb_none"}
    left:   {value:  1, spelling: "mb_left"}
    right:  {value:  2, spelling: "mb_right"}
    middle: {value:  3, spelling: "mb_middle"}

  joystickbutton:
    left:   {value: 0, spelling: "js_left"}
    right:  {value: 1, spelling: "js_right"}
    up:     {value: 2, spelling: "js_up"}
    down:   {value: 3, spelling: "js_down"}

# Mapping of GM's integer event ids to our event names
gamemakereventmappings:
  0:  # Instance construct event.
    single: Create

  1:  # Instance destruct event.
    single: Destroy

  2:  # Alarms. GM only supports ten.
    parameterized: Alarm[%1]  # Number <1-10>

  3:  # Step events.
    specialized:
      cases:
        0: Step
        1: BeginStep
        2: EndStep

  4:  # Collision events.
    parameterized: Collision[%1]  # <Object>

  5:  # Keyboard events.
    parameterized: Keyboard[%1]   # <Key>

  6:  # The "Mouse" group, which somehow inherited joysticks.
    specialized:
      cases:
        0: MouseButton[Left]
        1: MouseButton[Right]
        2: MouseButton[Middle]
        3: MouseButton[None]
        4: MousePressed[Left]
        5: MousePressed[Right]
        6: MousePressed[Middle]
        7: MouseReleased[Left]
        8: MouseReleased[Right]
        9: MouseReleased[Middle]
        10: MouseEnterWindow
        11: MouseLeaveWindow

        16: Joystick[1]Axis[Left]
        17: Joystick[1]Axis[Right]
        18: Joystick[1]Axis[Up]
        19: Joystick[1]Axis[Down]

        21: Joystick[1]Button[1]
        22: Joystick[1]Button[2]
        23: Joystick[1]Button[3]
        24: Joystick[1]Button[4]
        25: Joystick[1]Button[5]
        26: Joystick[1]Button[6]
        27: Joystick[1]Button[7]
        28: Joystick[1]Button[8]

        31: JoystickAxis[2][Left]
        32: JoystickAxis[2][Right]
        33: JoystickAxis[2][Up]
        34: JoystickAxis[2][Down]

        36: Joystick[2]Button[1]
        37: Joystick[2]Button[2]
        38: Joystick[2]Button[3]
        39: Joystick[2]Button[4]
        40: Joystick[2]Button[5]
        41: Joystick[2]Button[6]
        42: Joystick[2]Button[7]
        43: Joystick[2]Button[8]
        50: GlobalMouseButton[Left]
        51: GlobalMouseButton[Right]
        52: GlobalMouseButton[Middle]
        53: GlobalMousePressed[Left]
        54: GlobalMousePressed[Right]
        55: GlobalMousePressed[Middle]
        56: GlobalMouseReleased[Left]
        57: GlobalMouseReleased[Right]
        58: GlobalMouseReleased[Middle]
        60: MouseWheelUp
        61: MouseWheelDown

  7:  # The "Other" group, which became a dumping ground.
    specialized:
      cases:
        0: OutsideRoom
        1: InsideRoom
        2: GameStart
        3: GameEnd
        4: RoomStart
        5: RoomEnd
        6: NoMoreLives
        7: AnimationEnd
        8: PathEnd
        9: NoMoreHealth
        10: User[0]
        11: User[1]
        12: User[2]
        13: User[3]
        14: User[4]
        15: User[5]
        16: User[6]
        17: User[7]
        18: User[8]
        19: User[9]
        20: User[10]
        21: User[11]
        22: User[12]
        23: User[13]
        24: User[14]
        25: User[15]

        30: WindowClose

        40: OutsideView[0]
        41: OutsideView[1]
        42: OutsideView[2]
        43: OutsideView[3]
        44: OutsideView[4]
        45: OutsideView[5]
        46: OutsideView[6]
        47: OutsideView[7]

        50: InsideView[0]
        51: InsideView[1]
        52: InsideView[2]
        53: InsideView[3]
        54: InsideView[4]
        55: InsideView[5]
        56: InsideView[6]
        57: InsideView[7]

        60: ImageLoaded
        61: SoundLoaded
        62: HTTP
        63: Dialog

        66: IAP
        67: Cloud
        68: Networking
        69: Steam
        70: Social

  8:  # The "Draw" group.
    specialized:
      cases:
        0: Draw
        64: DrawGUI
        65: WindowResize

  9:  # The "Key Pressed" group.
    parameterized: KeyPressed[%1]  # <KeyCode>

  10: # The "Key Released" group.
    parameterized: KeyReleased[%1] # <KeyCode>
