# fetch repository as zip archive
shallow_clone: true
# disable automatic tests
test: off
# only increment the build number when building master
pull_requests:
  do_not_increment_build_number: true
# don't build "feature" branches
skip_branch_with_pr: true
branches:
  only:
    - master

init:
  - echo "%APPVEYOR_JOB_ID%"
  # store the name of the archive job in an environment variable
  # this designates the first job of every build as the archive job
  - ps: |
      $apiURL = "https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG"
      $project = Invoke-RestMethod -Method Get -Uri $apiURL/build/$env:APPVEYOR_BUILD_VERSION
      $env:ARCHIVE_JOB = $project.build.jobs[0].jobId
  - echo "%ARCHIVE_JOB%"
  - cd %APPVEYOR_BUILD_FOLDER%
environment:
  OUTPUT: /tmp/test.exe
  MSYS2_FC_CACHE_SKIP: yes
  matrix:
  #BEGIN WINDOWS
    # Game Modes
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Run, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None"}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None"}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Compile, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None"}

    # Platforms
    - {COMPILER: gcc, PLATFORM: SDL, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None",
       PACKAGES: mingw-w64-x86_64-SDL2}

    # Graphics
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D11, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None",
       PACKAGES: mingw-w64-x86_64-glm}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: OpenGL1, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None",
       PACKAGES: mingw-w64-x86_64-glew}

    # Audio
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: DirectSound, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None"}
    #TODO: Fix SFML on Windows
    #- {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: SFML, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None",
    #   PACKAGES: mingw-w64-x86_64-sfml}
    #TODO: Fix OpenAL on Windows
    #- {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: OpenAL, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "None",
    #   PACKAGES: mingw-w64-x86_64-openal mingw-w64-x86_64-dumb mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libogg mingw-w64-x86_64-flac mingw-w64-x86_64-mpg123
    #             mingw-w64-x86_64-libsndfile mingw-w64-x86_64-libgme}

    # Widgets
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: Win32, EXTENSIONS: "None"}
    #TODO: Fix GTK+ on Windows
    #- {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: GTK+, EXTENSIONS: "None",
    #   PACKAGES: mingw-w64-x86_64-gtk2}

    # Extensions
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "DirectShow"}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "WindowsTouch"}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "XInput"}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "MediaControlInterface"}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "Box2DPhysics",
       PACKAGES: mingw-w64-x86_64-box2d}
    - {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "StudioPhysics",
       PACKAGES: mingw-w64-x86_64-box2d}
    #TODO: Fix Bullet Physics on Windows
    #- {COMPILER: gcc, PLATFORM: Win32, MODE: Debug, GRAPHICS: Direct3D9, AUDIO: None, COLLISION: None, NETWORK: None, WIDGETS: None, EXTENSIONS: "BulletDynamics",
    #   PACKAGES: mingw-w64-x86_64-bullet}
  #END WINDOWS
install:
  - set PATH=c:\msys64;C:\msys64\mingw64\bin;c:\msys64\usr\local\bin;c:\msys64\usr\bin;%PATH%
  - > # Install packages common to all builds
    pacman --noconfirm -S mingw-w64-x86_64-boost mingw-w64-x86_64-pugixml mingw-w64-x86_64-rapidjson
    mingw-w64-x86_64-yaml-cpp mingw-w64-x86_64-grpc mingw-w64-x86_64-protobuf %PACKAGES%
  - gcc -v
  - ps: |
      If ($env:APPVEYOR_JOB_NUMBER -eq 1) {
        # use our first job to build JDI and the CLI
        C:\msys64\msys2_shell.cmd -defterm -mingw64 -no-start -here -lc "make -j 4; CLI_ENABLE_EGM=FALSE make -j 4 emake"

        # create a daemon PowerShell "job" (not the same as an AppVeyor build job) to zip and upload
        # the blobs artifact while we start building the engine
        $archive = {
          Set-Location $using:PWD
          7z a -t7z -mm=lzma2 -mx=4 -mmt blobs.zip compileEGMf.dll libEGM.dll libProtocols.dll emake.exe
          appveyor PushArtifact blobs.zip -Type Zip
        }
        $daemon = Start-Job -ScriptBlock $archive

        # register a callback so we can show the zip and upload output when it completes
        $jobEvent = Register-ObjectEvent $daemon StateChanged -Action {
          $result = Receive-Job -Job $daemon
          Write-Host ('Artifact daemon has completed.') -foregroundcolor "Magenta"
          Write-Host ($result | Out-String) -foregroundcolor "Gray"
        }
      } Else {
        # simply restore JDI and the CLI from the archive artifact of this same build using REST API
        $artifactsURL = "https://ci.appveyor.com/api/buildjobs/$env:ARCHIVE_JOB/artifacts/"
        appveyor DownloadFile ($artifactsURL + "blobs.zip") -FileName blobs.zip
        7z e -mmt blobs.zip
      }
build_script:
  # AppVeyor overrides %PLATFORM% because it's part of its API, so export it
  - C:\msys64\msys2_shell.cmd -defterm -mingw64 -no-start -here -lc "export PLATFORM=%PLATFORM%; ./ci-build.sh"
