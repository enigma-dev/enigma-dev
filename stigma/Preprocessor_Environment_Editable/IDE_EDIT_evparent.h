/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.


namespace enigma
{
  struct event_parent: object_collisions
  {
    virtual evariant myevent_windowclose() { return 0; } // No default Window Close code.
    virtual evariant myevent_roomstart() { return 0; } // No default Room Start code.
    virtual evariant myevent_beginstep() {
  {
  xprevious = x;
  yprevious = y;
  if (sprite_index != -1) {
    int imgnum = image_number;  // Special sauce happens here
    image_index = fmod(image_index + image_speed + imgnum, imgnum);
  }
}

      return 0;
    }
    virtual void myevent_alarm() { } // No default Alarm 0 code.
    virtual evariant myevent_keypressed_AnyKey() { return 0; } // No default Key Pressed AnyKey code.
    virtual evariant myevent_keypressed_Enter() { return 0; } // No default Key Pressed Enter code.
    virtual evariant myevent_keypressed_Escape() { return 0; } // No default Key Pressed Escape code.
    virtual evariant myevent_keypressed_F4() { return 0; } // No default Key Pressed F4 code.
    virtual evariant myevent_keypressed_Space() { return 0; } // No default Key Pressed Space code.
    virtual evariant myevent_keyreleased_Space() { return 0; } // No default Key Released Space code.
    virtual evariant myevent_step() {
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}

      return 0;
    }
    virtual evariant myevent_localsweep() {
  enigma::propagate_locals(this);

      return 0;
    }
    bool myevent_outsideroom_subcheck() {
  return (bbox_right < 0)  || (bbox_left > room_width) ||
(bbox_bottom < 0) || (bbox_top > room_height)
;
}
    virtual evariant myevent_outsideroom() { return 0; } // No default Outside Room code.
    virtual evariant myevent_beforecollisionautomaticcollisionhandling() { return 0; } // No default Pre-collision automatic collision handling. code.
    virtual void myevent_collision_dispatcher() { } // No default Collision obj_baddie_barrier code.
    virtual evariant myevent_endstep() {
  {
  if (timeline_running && timeline_loop && timeline_speed != 0)
    loop_curr_timeline();
}

      return 0;
    }
    virtual evariant myevent_particlesystemsupdate() { return 0; } // No default Particle systems update. code.
    bool myevent_draw_subcheck() {
  return visible;
}
    virtual evariant myevent_draw() {
  if (visible && sprite_index != -1) {
  draw_sprite_ext(sprite_index, image_index, x, y,
                  image_xscale, image_yscale, image_angle,
                  image_blend, image_alpha);
}

      return 0;
    }
    virtual evariant myevent_roomend() { return 0; } // No default Room End code.
    virtual evariant myevent_gameend() { return 0; } // No default Game End code.
    virtual void timeline_call_moment_script(int timeline_index, int moment_index) {
      switch (timeline_index) {
      }
    }
    //virtual void unlink() {} // This is already declared at the super level.
    virtual evariant myevents_perf(int type, int numb) {return 0;}
    event_parent() {}
    event_parent(unsigned _x, int _y): object_collisions(_x,_y) {}
  };
}
