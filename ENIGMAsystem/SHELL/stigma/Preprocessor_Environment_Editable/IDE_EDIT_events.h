/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.

namespace enigma
{
  event_iter *event_windowclose;
  event_iter *event_roomstart;
  event_iter *event_beginstep;
  event_iter *event_alarm;
  event_iter *event_keypressed_AnyKey;
  event_iter *event_keypressed_Enter;
  event_iter *event_keypressed_Escape;
  event_iter *event_keypressed_F4;
  event_iter *event_keypressed_Space;
  event_iter *event_keyreleased_Space;
  event_iter *event_step;
  event_iter *event_localsweep;
  event_iter *event_outsideroom;
  event_iter *event_beforecollisionautomaticcollisionhandling;
  event_iter *event_collision;
  event_iter *event_endstep;
  event_iter *event_particlesystemsupdate;
  event_iter *event_draw;
  event_iter *event_roomend;
  event_iter *event_gameend;
  int event_system_initialize()
  {
    events = new event_iter[20]; // Allocated here; not really meant to change.
    objects = new objectid_base[87]; // Allocated here; not really meant to change.
    event_windowclose = events + 0;
    event_windowclose->name = "Window Close";

    event_roomstart = events + 1;
    event_roomstart->name = "Room Start";

    event_beginstep = events + 2;
    event_beginstep->name = "Begin Step";

    event_alarm = events + 3;
    event_alarm->name = "Alarm 0";

    event_keypressed_AnyKey = events + 4;
    event_keypressed_AnyKey->name = "Key Pressed AnyKey";

    event_keypressed_Enter = events + 5;
    event_keypressed_Enter->name = "Key Pressed Enter";

    event_keypressed_Escape = events + 6;
    event_keypressed_Escape->name = "Key Pressed Escape";

    event_keypressed_F4 = events + 7;
    event_keypressed_F4->name = "Key Pressed F4";

    event_keypressed_Space = events + 8;
    event_keypressed_Space->name = "Key Pressed Space";

    event_keyreleased_Space = events + 9;
    event_keyreleased_Space->name = "Key Released Space";

    event_step = events + 10;
    event_step->name = "Step";

    event_localsweep = events + 11;
    event_localsweep->name = "Locals sweep";

    event_outsideroom = events + 12;
    event_outsideroom->name = "Outside Room";

    event_beforecollisionautomaticcollisionhandling = events + 13;
    event_beforecollisionautomaticcollisionhandling->name = "Pre-collision automatic collision handling.";

    event_collision = events + 14;
    event_collision->name = "Collision obj_baddie_barrier";

    event_endstep = events + 15;
    event_endstep->name = "End Step";

    event_particlesystemsupdate = events + 16;
    event_particlesystemsupdate->name = "Particle systems update.";

    event_draw = events + 17;
    event_draw->name = "Draw";

    event_roomend = events + 18;
    event_roomend->name = "Room End";

    event_gameend = events + 19;
    event_gameend->name = "Game End";

    return 0;
  }
  int game_settings_initialize() {
    return 0;
  }
  evariant ev_perf(int type, int numb) {
    return ((enigma::event_parent*) instance_event_iterator->inst)->myevents_perf(type, numb);
  }
  int ENIGMA_events()
  {
      for (instance_event_iterator = event_beginstep->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_beginstep();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
      for (instance_event_iterator = event_alarm->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_alarm();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    if (keyboard_check_pressed(vk_anykey))
      for (instance_event_iterator = event_keypressed_AnyKey->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_keypressed_AnyKey();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    if (keyboard_check_pressed(vk_enter))
      for (instance_event_iterator = event_keypressed_Enter->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_keypressed_Enter();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    if (keyboard_check_pressed(vk_escape))
      for (instance_event_iterator = event_keypressed_Escape->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_keypressed_Escape();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    if (keyboard_check_pressed(vk_f4))
      for (instance_event_iterator = event_keypressed_F4->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_keypressed_F4();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    if (keyboard_check_pressed(vk_space))
      for (instance_event_iterator = event_keypressed_Space->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_keypressed_Space();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    if (keyboard_check_pressed(vk_space))
      for (instance_event_iterator = event_keyreleased_Space->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_keyreleased_Space();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
      for (instance_event_iterator = event_step->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_step();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
      for (instance_event_iterator = event_localsweep->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_localsweep();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
      for (instance_event_iterator = event_outsideroom->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
        if (((enigma::event_parent*)(instance_event_iterator->inst))->myevent_outsideroom_subcheck()) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_outsideroom();
        }
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    enigma::perform_callbacks_before_collision_event();
    
    enigma::update_globals();
    
      for (instance_event_iterator = event_collision->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_collision_dispatcher();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
      for (instance_event_iterator = event_endstep->next; instance_event_iterator != NULL; instance_event_iterator = instance_event_iterator->next) {
          ((enigma::event_parent*) (instance_event_iterator->inst))->myevent_endstep();
        if (enigma::room_switching_id != -1) goto after_events;
      }
    
    enigma::update_globals();
    
    enigma::perform_callbacks_particle_updating();
    
    enigma::update_globals();
    
    // We never want to iterate draw; we let screen_redraw() handle it.
if (automatic_redraw) screen_redraw();
    
    enigma::update_globals();
    
    after_events:
    enigma::dispose_destroyed_instances();
    enigma::rooms_switch();
    enigma::set_room_speed(room_speed);
    
    return 0;
  } // event function
} // namespace enigma
