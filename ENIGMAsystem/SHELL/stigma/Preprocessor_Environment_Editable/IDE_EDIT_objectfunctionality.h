/********************************************************************************\
**                                                                              **
**  Copyright (C) 2008 Josh Ventura                                             **
**                                                                              **
**  This file is a part of the ENIGMA Development Environment.                  **
**                                                                              **
**                                                                              **
**  ENIGMA is free software: you can redistribute it and/or modify it under the **
**  terms of the GNU General Public License as published by the Free Software   **
**  Foundation, version 3 of the license or any later version.                  **
**                                                                              **
**  This application and its source code is distributed AS-IS, WITHOUT ANY      **
**  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   **
**  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       **
**  details.                                                                    **
**                                                                              **
**  You should have recieved a copy of the GNU General Public License along     **
**  with this code. If not, see <http://www.gnu.org/licenses/>                  **
**                                                                              **
**  ENIGMA is an environment designed to create games and other programs with a **
**  high-level, fully compilable language. Developers of ENIGMA or anything     **
**  associated with ENIGMA are in no way responsible for its users or           **
**  applications created by its users, or damages caused by the environment     **
**  or programs made in the environment.                                        **
**                                                                              **
\********************************************************************************/

//This file was generated by the ENIGMA Development Environment.
//Editing it is a sign of a certain medical condition. We're not sure which one.


#define log_xor || log_xor_helper() ||
struct log_xor_helper { bool value; };
template<typename LEFT> log_xor_helper operator ||(const LEFT &left, const log_xor_helper &xorh) { log_xor_helper nxor; nxor.value = (bool)left; return nxor; }
template<typename RIGHT> bool operator ||(const log_xor_helper &xorh, const RIGHT &right) { return xorh.value ^ (bool)right; }

evariant _SCR_create_views(evariant argument0, evariant argument1, evariant argument2, evariant argument3, evariant argument4, evariant argument5, evariant argument6, evariant argument7, evariant argument8, evariant argument9, evariant argument10, evariant argument11, evariant argument12, evariant argument13, evariant argument14, evariant argument15)
{
  var display_width, display_height, viewport_width, viewport_height;
  display_width = 640;
  display_height = 480;
  viewport_width = display_width - 64;
  viewport_height = display_height - 64;
  room_set_view(rm_splash_screen, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_splash_screen, 1, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_title_screen, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_title_screen, 1, 1, 32, 32, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, 0, 0, - 1);
  room_set_view(rm_level_1, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_1, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_2, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_2, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_3, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_3, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_4, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_4, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_5, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_5, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_6, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_6, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_7, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_7, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_8, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_8, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  room_set_view(rm_level_9, 0, 1, 0, 0, display_width, display_height, 0, 0, display_width, display_height, 0, 0, 0, 0, - 1);
  room_set_view(rm_level_9, 1, 1, 0, 0, viewport_width, viewport_height, (display_width / (double) 2)- (viewport_width / (double) 2), (display_height / (double) 2)- (viewport_height / (double) 2), viewport_width, viewport_height, viewport_width / (double) 2, viewport_height / (double) 2, - 1, - 1, obj_character);
  ;
  
  return 0;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_splash_screen::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
  if (myevent_alarm_1_subcheck()) {
    myevent_alarm_1();
  }
}
evariant enigma::OBJ_obj_splash_screen::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    alarm[int(0)]= room_speed * 2;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_splash_screen::myevent_alarm_0()
{
  
  {
    image_index = 1;
    alarm[int(1)]= room_speed * 2;
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_splash_screen::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_splash_screen::myevent_alarm_1()
{
  
  {
    room_goto(rm_title_screen);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_splash_screen::myevent_alarm_1_subcheck() {
  alarm[1] = (int) alarm[1];
  return alarm[1] < 0 ? false : !((int)--alarm[1]);
}

evariant enigma::OBJ_obj_splash_screen::myevent_draw()
{
  
  {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_splash_screen::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_splash_screen::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_title_logo::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
  if (myevent_alarm_1_subcheck()) {
    myevent_alarm_1();
  }
}
evariant enigma::OBJ_obj_title_logo::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(1)]= room_speed * 8;
    image_index = 0;
    image_speed = 0;
    pressed = 0;
    sound_stop_all();
    
  }
  action_sound(snd_theme_0, 1);
  action_sound(snd_theme_1, 0);
  
  return 0;
}

evariant enigma::OBJ_obj_title_logo::myevent_alarm_0()
{
  
  {
    room_goto(rm_level_1);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_title_logo::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_title_logo::myevent_alarm_1()
{
  
  {
    if((pressed == 0))
    {
      image_speed = .0625;
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_title_logo::myevent_alarm_1_subcheck() {
  alarm[1] = (int) alarm[1];
  return alarm[1] < 0 ? false : !((int)--alarm[1]);
}

evariant enigma::OBJ_obj_title_logo::myevent_roomstart()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess__lives(int(global))= 0;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_title_logo::myevent_roomend()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess__lives(int(global))= 3;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_title_logo::myevent_keypressed_AnyKey()
{
  sound_stop(snd_theme_1);
  
  {
    alarm[int(1)]= 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_title_logo::myevent_keypressed_Escape()
{
  
  {
    game_end();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_title_logo::myevent_keypressed_Space()
{
  if(action_if_variable(pressed, 0, 0))
    if(action_if_variable(image_speed, .0625, 0))
  {
    action_sound(snd_door, 0);
    
    {
      image_index = 0;
      image_speed = .25;
      pressed = 1;
      alarm[int(0)]= 32;
      
    }
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_title_logo::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_copyright::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_love::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_door_top::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_door_bottom::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_doorknob::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_doorway_ver::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_doorway_hor::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_doorway_corner_left::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_doorway_corner_right::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_doorway_bottom::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_background_shark::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_barrier)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_barrier); it; ++it) {
      int $$$internal$$$ = obj_baddie_barrier;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_barrier();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_background_shark::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  dir = choose((enigma::varargs(), - 1, 1));
  image_xscale = dir;
  image_speed = .25;
  
  return 0;
}

evariant enigma::OBJ_obj_background_shark::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}

x += dir * 4;
  
  return 0;
}

evariant enigma::OBJ_obj_background_shark::myevent_collision_obj_baddie_barrier()
{
  x = xprevious;
  dir =- dir;
  image_xscale =- image_xscale;
  
  return 0;
}

inline bool enigma::OBJ_obj_background_shark::myevent_collision_obj_baddie_barrier_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_barrier);
}

bool enigma::OBJ_obj_background_shark::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_controller::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_controller::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    window_set_caption("Key to Success");
    create_views();
    instance_create(0, 0, obj_background);
    randomize();
    enigma::varaccess__lives(int(global))= 0;
    subimg_index = 0;
    alarm[int(0)]= 10;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_controller::myevent_alarm_0()
{
  
  {
    if((room == rm_init_game))
    {
      window_set_icon(spr_icon, 0);
      room_goto_next();
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_controller::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_controller::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    if((instance_exists(obj_paused)== 0 && instance_exists(obj_game_win)== 0 && instance_exists(obj_game_lose)== 0))
      subimg_index += .125;
    if((subimg_index > 4))
    {
      subimg_index = 0;
      
    }
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_controller::myevent_roomend()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    enigma::varaccess_level_previous(int(global))= room;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_controller::myevent_windowclose()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    game_end();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_controller::myevent_draw()
{
  
  {
    if((room == rm_init_game))
      return 0;;
    col = c_white;
    if((view_current == 0))
    {
      draw_set_color(c_white);
      if((instance_exists(obj_splash_screen)))
      {
        if((enigma::glaccess(int(obj_splash_screen))-> image_index == 0))
          draw_set_color(make_color_rgb(18, 139, 120));
        else if((enigma::glaccess(int(obj_splash_screen))-> image_index == 1))
          draw_set_color(make_color_rgb(250, 236, 247));
        draw_rectangle(view_xport[int(0)] - 8, view_yport[int(0)] - 8, view_xport[int(0)] + view_wport[int(0)] + 8, view_yport[int(0)] + view_hport[int(0)] + 8, 0);
        
      }
      else
      {
        if((instance_exists(obj_paused)|| instance_exists(obj_game_win)|| instance_exists(obj_game_lose)))
          col = c_lime;
        if((room == rm_title_screen || room == rm_level_1 || room == rm_level_2))
          draw_sprite_tiled_ext(spr_zone_1, 0, view_xview[int(1)], view_yview[int(1)], 2, 2, col, 1);
        if((room == rm_level_3 || room == rm_level_4))
          draw_sprite_tiled_ext(spr_zone_2, 0, view_xview[int(1)], view_yview[int(1)], 2, 2, col, 1);
        if((room == rm_level_5 || room == rm_level_6))
          draw_sprite_tiled_ext(spr_zone_3, 0, view_xview[int(1)], view_yview[int(1)], 2, 2, col, 1);
        if((room == rm_level_7 || room == rm_level_8 || room == rm_level_9))
          draw_sprite_tiled_ext(spr_zone_4, 0, view_xview[int(1)], view_yview[int(1)], 2, 2, col, 1);
        draw_set_alpha(.6);
        draw_set_color(c_black);
        draw_rectangle(view_xport[int(0)] - 8, view_yport[int(0)] - 8, view_xport[int(0)] + view_wport[int(0)] + 8, view_yport[int(0)] + view_hport[int(0)] + 8, 0);
        draw_set_alpha(1);
        draw_set_color(c_black);
        draw_rectangle(view_xport[int(1)] - 16, view_yport[int(1)] - 16, view_xport[int(1)] + view_wport[int(1)] + 16, view_yport[int(1)] + view_hport[int(1)] + 16, 0);
        draw_set_color(col);
        draw_rectangle(view_xport[int(1)] - 12, view_yport[int(1)] - 12, view_xport[int(1)] + view_wport[int(1)] + 12, view_yport[int(1)] + view_hport[int(1)] + 12, 0);
        draw_set_color(c_black);
        draw_rectangle(view_xport[int(1)] - 4, view_yport[int(1)] - 4, view_xport[int(1)] + view_wport[int(1)] + 4, view_yport[int(1)] + view_hport[int(1)] + 4, 0);
        
      }
      draw_set_color(c_white);
      
    }
    if((view_current == 1))
    {
      if((instance_exists(obj_paused)|| instance_exists(obj_game_win)|| instance_exists(obj_game_lose)))
        col = c_lime;
      for(i = 0; i < enigma::varaccess__lives(int(global)); i += 1)
      {
        draw_sprite_ext(spr_char_walk, subimg_index, view_xview[int(1)] + 16 + (32 * i), view_yview[int(1)] + view_hview[int(1)] - 16, .5, .5, 0, col, 1);
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_controller::myevent_draw_subcheck() {
  return visible;
}

evariant enigma::OBJ_obj_controller::myevent_keypressed_Enter()
{
  
  {
    if((room != rm_init_game && room != rm_splash_screen && instance_exists(obj_paused)== 0 && instance_exists(obj_game_win)== 0 && instance_exists(obj_game_lose)== 0))
    {
      if((keyboard_check(vk_control)))
      {
        if((room_exists(room_next(room))))
        {
          room_goto_next();
          
        }
        else
        {
          room_goto(rm_title_screen);
          
        }
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_controller::myevent_keypressed_F4()
{
  
  {
    if((keyboard_check(vk_alt)))
    {
      game_end();
      
    }
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_controller::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_background::myevent_draw()
{
  
  {
    if((room == rm_level_1 || room == rm_level_2))
    {
      draw_sprite_tiled(spr_zone_1, 0, - view_xview[int(1)] / (double) 4, - view_yview[int(1)] / (double) 4);
      
    }
    if((room == rm_level_3 || room == rm_level_4))
    {
      draw_sprite_tiled(spr_zone_2, 0, - view_xview[int(1)] / (double) 4, - view_yview[int(1)] / (double) 4);
      
    }
    if((room == rm_level_5 || room == rm_level_6))
    {
      draw_sprite_tiled(spr_zone_3, 0, - view_xview[int(1)] / (double) 4, - view_yview[int(1)] / (double) 4);
      
    }
    if((room == rm_title_screen || room == rm_level_7 || room == rm_level_8 || room == rm_level_9))
    {
      draw_sprite_tiled(spr_zone_4, 0, - view_xview[int(1)] / (double) 4, - view_yview[int(1)] / (double) 4);
      
    }
    draw_set_alpha(.6);
    draw_set_color(c_black);
    draw_rectangle(0, 0, 1920, 1024, 0);
    draw_set_alpha(1);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_background::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_background::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_character::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
void enigma::OBJ_obj_character::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_parent); it; ++it) {
      int $$$internal$$$ = obj_baddie_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_land_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_land_parent); it; ++it) {
      int $$$internal$$$ = obj_land_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_land_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_water_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_water_parent); it; ++it) {
      int $$$internal$$$ = obj_water_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_water_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_door)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_door); it; ++it) {
      int $$$internal$$$ = obj_door;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_door();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_character::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    allow_multiplayer = 1;
    
  }
  if(action_if_variable(room, rm_level_1, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_title_screen, 0))
  {
    sound_stop(snd_theme_1);
    action_sound(snd_theme_1, 0);
    
  }
  if(action_if_variable(room, rm_level_2, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_1, 0))
  {
    sound_stop(snd_theme_1);
    action_sound(snd_theme_1, 0);
    
  }
  if(action_if_variable(room, rm_level_3, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_2, 0))
  {
    sound_stop(snd_theme_1);
    action_sound(snd_theme_2, 0);
    
  }
  if(action_if_variable(room, rm_level_4, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_3, 0))
  {
    sound_stop(snd_theme_2);
    action_sound(snd_theme_2, 0);
    
  }
  if(action_if_variable(room, rm_level_5, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_4, 0))
  {
    sound_stop(snd_theme_2);
    action_sound(snd_theme_3, 0);
    
  }
  if(action_if_variable(room, rm_level_6, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_5, 0))
  {
    sound_stop(snd_theme_3);
    action_sound(snd_theme_3, 0);
    
  }
  if(action_if_variable(room, rm_level_7, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_6, 0))
  {
    sound_stop(snd_theme_3);
    action_sound(snd_theme_4, 0);
    
  }
  if(action_if_variable(room, rm_level_8, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_7, 0))
  {
    sound_stop(snd_theme_4);
    action_sound(snd_theme_4, 0);
    
  }
  if(action_if_variable(room, rm_level_9, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_8, 0))
  {
    sound_stop(snd_theme_4);
    action_sound(snd_theme_4, 0);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_character::myevent_alarm_0()
{
  
  {
    room_goto_next();
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_character::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_character::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    if((allow_multiplayer && x == xstart && y == ystart && keyboard_check_pressed(ord("2"))&& ! instance_exists(obj_charlittle))
      )
    {
      instance_create(x, y, obj_charlittle);
      allow_multiplayer = 0;
      
    }
    if((! place_meeting(x, y, obj_ladder)))
    {
      if((keyboard_check_pressed(vk_space)))
      {
        if((! place_free(x, y + 1)))
        {
          vspeed =- 10;
          sound_play(snd_jump);
          
        }
        else
        {
          if((place_meeting(x, y, obj_water_parent)))
          {
            vspeed =- 10;
            sound_play(snd_jump);
            
          }
          
        }
        
      }
      
    }
    if((keyboard_check(vk_left)&& keyboard_check(vk_right)))
    {
      if((! place_meeting(x, y, obj_ladder)))
      {
        image_index = 0;
        
      }
      
    }
    if((keyboard_check(vk_left)&& (! keyboard_check(vk_right))))
    {
      if((place_free(x - 8, y)))
      {
        x -= 8;
        image_xscale =- 1;
        if((! place_free(x, y + 1)))
        {
          image_index += .5;
          
        }
        
      }
      
    }
    if(((! keyboard_check(vk_left))&& keyboard_check(vk_right)))
    {
      if((place_free(x + 8, y)))
      {
        x += 8;
        image_xscale = 1;
        if((! place_free(x, y + 1)))
        {
          image_index += .5;
          
        }
        
      }
      
    }
    if((keyboard_check_released(vk_left)|| keyboard_check_released(vk_right)))
    {
      image_index = 0;
      
    }
    if((place_free(x, y + 1)))
    {
      gravity_direction = 270;
      gravity = .5;
      
    }
    else
    {
      gravity_direction = 270;
      gravity = 0;
      
    }
    if((vspeed > 12))
    {
      vspeed = 12;
      
    }
    if((place_meeting(x, y, obj_ladder)))
    {
      if((keyboard_check(vk_up)))
      {
        if((place_free(x, y - 8)))
        {
          y -= 8;
          
        }
        
      }
      
    }
    else
    {
      if((keyboard_check_pressed(vk_up)))
      {
        if((! place_free(x, y + 1)))
        {
          vspeed =- 10;
          sound_play(snd_jump);
          
        }
        if((place_meeting(x, y, obj_water_parent)))
        {
          vspeed =- 10;
          sound_play(snd_jump);
          
        }
        
      }
      
    }
    if((keyboard_check(vk_down)))
    {
      if((place_meeting(x, y, obj_ladder)))
      {
        if((place_free(x, y + 8)))
        {
          y += 8;
          
        }
        
      }
      
    }
    
  }
  if((argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
  {
    
    {
      argument_relative = 0;
      action_set_gravity(270, 0);
      
    }
    
    {
      argument_relative = 0;
      action_set_vspeed(0);
      
    }
    
    {
      if((sprite_index == spr_char_walk))
      {
        sprite_index = spr_char_climb;
        
      }
      
    }
    
  }
  else
  {
    
    {
      if((sprite_index == spr_char_climb))
      {
        sprite_index = spr_char_walk;
        
      }
      
    }
    if(! (argument_relative = 1, action_if_collision(0, 1, 0)))
      image_index = 1;
    else if(! (argument_relative = 1, action_if_object(obj_water_parent, 0, 32)))
    {
      if(! (keyboard_check(vk_left)|| keyboard_check(vk_right)))
        image_index = 0;
      
    }
    
  }
  if(! (argument_relative = 1, action_if_object(obj_water_parent, 0, 32)))
  {
    if((argument_relative = 1, action_if_collision(0, 1, 0)))
    {
      if((argument_relative = 1, action_if_collision(8, 0, 0)))
      {
        if(! (argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
          image_index = 0;
        
      }
      if((argument_relative = 1, action_if_collision(- 8, 0, 0)))
      {
        if(! (argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
          image_index = 0;
        
      }
      
    }
    
  }
  if((argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
  {
    if((keyboard_check(vk_left)&& (! keyboard_check(vk_right))))
    {
      image_index += .5;
      
    }
    if(((! keyboard_check(vk_left))&& keyboard_check(vk_right)))
    {
      image_index += .5;
      
    }
    if((keyboard_check(vk_up)&& (! keyboard_check(vk_down))))
    {
      image_index += .5;
      
    }
    if(((! keyboard_check(vk_up))&& keyboard_check(vk_down)))
    {
      image_index += .5;
      
    }
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_character::myevent_collision_obj_baddie_parent()
{
  
  {
    argument_relative = 1;
    action_create_object(obj_char_lose, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_character::myevent_collision_obj_baddie_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_parent);
}

evariant enigma::OBJ_obj_character::myevent_collision_obj_land_parent()
{
  action_move_contact(direction, 12, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(0);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_character::myevent_collision_obj_land_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_land_parent);
}

evariant enigma::OBJ_obj_character::myevent_collision_obj_water_parent()
{
  if((argument_relative = 1, action_if_object(obj_water_parent, 0, 0)))
  {
    if(! (argument_relative = 1, action_if_object(obj_land_parent, 0, 32)))
    {
      
      {
        if((keyboard_check(vk_up)|| keyboard_check(vk_space)))
        {
          image_index = 3;
          
        }
        else
        {
          image_index = 1;
          
        }
        
      }
      
    }
    else
    {
      
      {
        if((keyboard_check(vk_left)== 0 && keyboard_check(vk_right)== 0))
        {
          image_index = 0;
          
        }
        
      }
      if((argument_relative = 1, action_if_object(obj_land_parent, - 32, 0)))
      {
        image_index = 0;
        
      }
      if((argument_relative = 1, action_if_object(obj_land_parent, 32, 0)))
      {
        image_index = 0;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_character::myevent_collision_obj_water_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_water_parent);
}

evariant enigma::OBJ_obj_character::myevent_collision_obj_door()
{
  
  {
    if((enigma::glaccess(int(other))-> image_index == 1))
    {
      instance_create(x, y, obj_char_win);
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_character::myevent_collision_obj_door_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_door);
}

evariant enigma::OBJ_obj_character::myevent_keypressed_Escape()
{
  
  {
    instance_create(view_xview[int(1)] + 480, view_yview[int(1)] + 270, obj_paused);
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_character::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_charlittle::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
void enigma::OBJ_obj_charlittle::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_parent); it; ++it) {
      int $$$internal$$$ = obj_baddie_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_land_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_land_parent); it; ++it) {
      int $$$internal$$$ = obj_land_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_land_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_water_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_water_parent); it; ++it) {
      int $$$internal$$$ = obj_water_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_water_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_door)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_door); it; ++it) {
      int $$$internal$$$ = obj_door;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_door();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_charlittle::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    
  }
  if(action_if_variable(room, rm_level_1, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_title_screen, 0))
  {
    sound_stop(snd_theme_1);
    action_sound(snd_theme_1, 0);
    
  }
  if(action_if_variable(room, rm_level_2, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_1, 0))
  {
    sound_stop(snd_theme_1);
    action_sound(snd_theme_1, 0);
    
  }
  if(action_if_variable(room, rm_level_3, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_2, 0))
  {
    sound_stop(snd_theme_1);
    action_sound(snd_theme_2, 0);
    
  }
  if(action_if_variable(room, rm_level_4, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_3, 0))
  {
    sound_stop(snd_theme_2);
    action_sound(snd_theme_2, 0);
    
  }
  if(action_if_variable(room, rm_level_5, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_4, 0))
  {
    sound_stop(snd_theme_2);
    action_sound(snd_theme_3, 0);
    
  }
  if(action_if_variable(room, rm_level_6, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_5, 0))
  {
    sound_stop(snd_theme_3);
    action_sound(snd_theme_3, 0);
    
  }
  if(action_if_variable(room, rm_level_7, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_6, 0))
  {
    sound_stop(snd_theme_3);
    action_sound(snd_theme_4, 0);
    
  }
  if(action_if_variable(room, rm_level_8, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_7, 0))
  {
    sound_stop(snd_theme_4);
    action_sound(snd_theme_4, 0);
    
  }
  if(action_if_variable(room, rm_level_9, 0))
    if(action_if_variable(enigma::varaccess_level_previous(int(global)), rm_level_8, 0))
  {
    sound_stop(snd_theme_4);
    action_sound(snd_theme_4, 0);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_charlittle::myevent_alarm_0()
{
  
  {
    room_goto_next();
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_charlittle::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_charlittle::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    if((! place_meeting(x, y, obj_ladder)))
    {
      if((keyboard_check_pressed(ord("W")))
        )
      {
        if((! place_free(x, y + 1)))
        {
          vspeed =- 10;
          sound_play(snd_jump);
          
        }
        else
        {
          if((place_meeting(x, y, obj_water_parent)))
          {
            vspeed =- 10;
            sound_play(snd_jump);
            
          }
          
        }
        
      }
      
    }
    if((keyboard_check(ord("A"))&& keyboard_check(ord("D"))
      ))
    {
      if((! place_meeting(x, y, obj_ladder)))
      {
        image_index = 0;
        
      }
      
    }
    if((keyboard_check(ord("A"))&& (! keyboard_check(ord("D")))
      ))
    {
      if((place_free(x - 8, y)))
      {
        x -= 8;
        image_xscale =- 1;
        if((! place_free(x, y + 1)))
        {
          image_index += .5;
          
        }
        
      }
      
    }
    if(((! keyboard_check(ord("A")))&& keyboard_check(ord("D"))
      ))
    {
      if((place_free(x + 8, y)))
      {
        x += 8;
        image_xscale = 1;
        if((! place_free(x, y + 1)))
        {
          image_index += .5;
          
        }
        
      }
      
    }
    if((keyboard_check_released(ord("A"))|| keyboard_check_released(ord("D"))
      ))
    {
      image_index = 0;
      
    }
    if((place_free(x, y + 1)))
    {
      gravity_direction = 270;
      gravity = .5;
      
    }
    else
    {
      gravity_direction = 270;
      gravity = 0;
      
    }
    if((vspeed > 12))
    {
      vspeed = 12;
      
    }
    if((place_meeting(x, y, obj_ladder)))
    {
      if((keyboard_check(ord("W")))
        )
      {
        if((place_free(x, y - 8)))
        {
          y -= 8;
          
        }
        
      }
      
    }
    else
    {
      if((keyboard_check_pressed(ord("W")))
        )
      {
        if((! place_free(x, y + 1)))
        {
          vspeed =- 10;
          sound_play(snd_jump);
          
        }
        if((place_meeting(x, y, obj_water_parent)))
        {
          vspeed =- 10;
          sound_play(snd_jump);
          
        }
        
      }
      
    }
    if((keyboard_check(ord("S")))
      )
    {
      if((place_meeting(x, y, obj_ladder)))
      {
        if((place_free(x, y + 8)))
        {
          y += 8;
          
        }
        
      }
      
    }
    
  }
  if((argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
  {
    
    {
      argument_relative = 0;
      action_set_gravity(270, 0);
      
    }
    
    {
      argument_relative = 0;
      action_set_vspeed(0);
      
    }
    
    {
      if((sprite_index == spr_char_walk))
      {
        sprite_index = spr_char_climb;
        
      }
      
    }
    
  }
  else
  {
    
    {
      if((sprite_index == spr_char_climb))
      {
        sprite_index = spr_char_walk;
        
      }
      
    }
    if(! (argument_relative = 1, action_if_collision(0, 1, 0)))
      image_index = 1;
    else if(! (argument_relative = 1, action_if_object(obj_water_parent, 0, 32)))
    {
      if(! (keyboard_check(ord("A"))|| keyboard_check(ord("D"))
        ))image_index = 0;
      
    }
    
  }
  if(! (argument_relative = 1, action_if_object(obj_water_parent, 0, 32)))
  {
    if((argument_relative = 1, action_if_collision(0, 1, 0)))
    {
      if((argument_relative = 1, action_if_collision(8, 0, 0)))
      {
        if(! (argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
          image_index = 0;
        
      }
      if((argument_relative = 1, action_if_collision(- 8, 0, 0)))
      {
        if(! (argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
          image_index = 0;
        
      }
      
    }
    
  }
  if((argument_relative = 1, action_if_object(obj_ladder, 0, 0)))
  {
    if((keyboard_check(ord("A"))&& (! keyboard_check(ord("D")))
      ))
    {
      image_index += .5;
      
    }
    if(((! keyboard_check(ord("A")))&& keyboard_check(ord("D"))
      ))
    {
      image_index += .5;
      
    }
    if((keyboard_check(ord("W"))&& (! keyboard_check(ord("S")))
      ))
    {
      image_index += .5;
      
    }
    if(((! keyboard_check(ord("W")))&& keyboard_check(ord("S"))
      ))
    {
      image_index += .5;
      
    }
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_charlittle::myevent_collision_obj_baddie_parent()
{
  
  {
    argument_relative = 1;
    action_create_object(obj_charlittle_die, 0, 0);
    
  }
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_charlittle::myevent_collision_obj_baddie_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_parent);
}

evariant enigma::OBJ_obj_charlittle::myevent_collision_obj_land_parent()
{
  action_move_contact(direction, 12, 0);
  
  {
    argument_relative = 0;
    action_set_vspeed(0);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_charlittle::myevent_collision_obj_land_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_land_parent);
}

evariant enigma::OBJ_obj_charlittle::myevent_collision_obj_water_parent()
{
  if((argument_relative = 1, action_if_object(obj_water_parent, 0, 0)))
  {
    if(! (argument_relative = 1, action_if_object(obj_land_parent, 0, 32)))
    {
      
      {
        if((keyboard_check(ord("W")))
          )
        {
          image_index = 3;
          
        }
        else
        {
          image_index = 1;
          
        }
        
      }
      
    }
    else
    {
      
      {
        if((keyboard_check(ord("A"))== 0 && keyboard_check(ord("D"))
          == 0))
        {
          image_index = 0;
          
        }
        
      }
      if((argument_relative = 1, action_if_object(obj_land_parent, - 32, 0)))
      {
        image_index = 0;
        
      }
      if((argument_relative = 1, action_if_object(obj_land_parent, 32, 0)))
      {
        image_index = 0;
        
      }
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_charlittle::myevent_collision_obj_water_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_water_parent);
}

evariant enigma::OBJ_obj_charlittle::myevent_collision_obj_door()
{
  
  {
    if((enigma::glaccess(int(other))-> image_index == 1))
    {
      instance_destroy();
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_charlittle::myevent_collision_obj_door_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_door);
}

evariant enigma::OBJ_obj_charlittle::myevent_draw()
{
  
  {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale / (double) 2, image_yscale / (double) 2, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_charlittle::myevent_draw_subcheck() {
  return visible;
}

evariant enigma::OBJ_obj_charlittle::myevent_keypressed_Escape()
{
  
  {
    instance_create(view_xview[int(1)] + 480, view_yview[int(1)] + 270, obj_paused);
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_charlittle::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_char_win::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_char_win::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 50;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_char_win::myevent_alarm_0()
{
  
  {
    if((room_exists(room_next(room))))
    {
      room_goto_next();
      
    }
    else
    {
      instance_create(view_xview[int(1)] + 480, view_yview[int(1)] + 270, obj_game_win);
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_char_win::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

bool enigma::OBJ_obj_char_win::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_char_lose::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    for(i = 0; i <= 360; i += 36)
    {
      inst = instance_create(x, y, obj_sparkle);
      enigma::glaccess(int(inst))-> direction = i;
      enigma::glaccess(int(inst))-> speed = 16;
      
    }
    
  }
  action_sound(snd_die, 0);
  
  return 0;
}

bool enigma::OBJ_obj_char_lose::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_charlittle_die::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    for(i = 0; i <= 360; i += 36)
    {
      inst = instance_create(x, y, obj_sparklittle);
      enigma::glaccess(int(inst))-> direction = i;
      enigma::glaccess(int(inst))-> speed = 16;
      
    }
    
  }
  action_sound(snd_die, 0);
  
  return 0;
}

bool enigma::OBJ_obj_charlittle_die::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_parent::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_land_parent::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_water_parent::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_key::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_character)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_character); it; ++it) {
      int $$$internal$$$ = obj_character;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_character();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_charlittle)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_charlittle); it; ++it) {
      int $$$internal$$$ = obj_charlittle;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_charlittle();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_key::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_index = random(5);
    image_speed = .25;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_key::myevent_collision_obj_character()
{
  action_sound(snd_key, 0);
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_key::myevent_collision_obj_character_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_character);
}

evariant enigma::OBJ_obj_key::myevent_collision_obj_charlittle()
{
  action_sound(snd_key, 0);
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_key::myevent_collision_obj_charlittle_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_charlittle);
}

bool enigma::OBJ_obj_key::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_door::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = 0;
    nextlevel = 0;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_door::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    if((instance_exists(obj_key)== 0 && image_index == 0))
      nextlevel = 1;
    
  }
  if(action_if_variable(nextlevel, 1, 0))
  {
    if(sound_isplaying(snd_key))
      sound_stop(snd_key);
    action_sound(snd_door, 0);
    nextlevel = 0;
    image_index = 1;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_door::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_sparkle::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_sparkle::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 25;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_sparkle::myevent_alarm_0()
{
  
  {
    enigma::varaccess__lives(int(global))-= 1;
    if((enigma::varaccess__lives(int(global))< 0))
    {
      instance_create(view_xview[int(1)] + 480, view_yview[int(1)] + 270, obj_game_lose);
      
    }
    else
    {
      room_restart();
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_sparkle::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

bool enigma::OBJ_obj_sparkle::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_sparklittle::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_sparklittle::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_xscale = 1 / (double) 2;
    image_yscale = 1 / (double) 2;
    alarm[int(0)]= 25;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_sparklittle::myevent_alarm_0()
{
  
  {
    instance_destroy();
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_sparklittle::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

bool enigma::OBJ_obj_sparklittle::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_ladder::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_water_outline::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_water_outline::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_water_top::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_alpha = .5;
    image_speed = .5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_water_top::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_water_base::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_alpha = .5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_water_base::can_cast(int obj) const {
  return (obj==22);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_paused::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_paused::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    ready = 0;
    alarm[int(0)]= 2;
    PausedBG = sprite_create_from_screen(0, 0, window_get_width(), window_get_height(), 0, 0, 0, 0);
    instance_deactivate_all(1);
    instance_activate_object(obj_controller);
    instance_activate_object(obj_background);
    sound_stop_all();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_paused::myevent_destroy()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_sound(snd_theme_0, 1);
  
  return 0;
}

evariant enigma::OBJ_obj_paused::myevent_alarm_0()
{
  
  {
    ready = 1;
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_paused::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_paused::myevent_gameend()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sprite_delete(PausedBG);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_paused::myevent_draw()
{
  
  {
    draw_set_color(c_white);
    draw_sprite_stretched_ext(PausedBG, 0, view_xview[int(1)] - 32, view_yview[int(1)] - 32, 640, 480, c_lime, 1);
    draw_sprite_ext(sprite_index, 0, view_xview[int(1)] + (view_wview[int(1)] / (double) 2), view_yview[int(1)] + (view_hview[int(1)] / (double) 2), 1, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_paused::myevent_draw_subcheck() {
  return visible;
}

evariant enigma::OBJ_obj_paused::myevent_keypressed_Escape()
{
  
  {
    if((ready == 1))
    {
      sprite_delete(PausedBG);
      room_goto(rm_title_screen);
      
    }
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_paused::myevent_keyreleased_Space()
{
  
  {
    instance_activate_all();
    sprite_delete(PausedBG);
    instance_destroy();
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_paused::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_brick::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_brick_hor::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_brick_ver::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_brick_mid::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_destroy_acid::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_acid_leak::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_baddie_acid_leak::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 1 + random(50);
    sprite_index =- 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_acid_leak::myevent_alarm_0()
{
  
  {
    instance_create(x + 32, y + 64, obj_baddie_acid_drop);
    alarm[int(0)]= 100 + random(50);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_acid_leak::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_baddie_acid_leak::myevent_draw()
{
  
  {
    draw_sprite(spr_baddie_acid_leak, 0, x, y);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_acid_leak::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_baddie_acid_leak::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_acid_drop::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_destroy_acid)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_destroy_acid); it; ++it) {
      int $$$internal$$$ = obj_baddie_destroy_acid;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_destroy_acid();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_acid_drop::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    vspeed = 8;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_acid_drop::myevent_collision_obj_baddie_destroy_acid()
{
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_acid_drop::myevent_collision_obj_baddie_destroy_acid_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_destroy_acid);
}

evariant enigma::OBJ_obj_baddie_acid_drop::myevent_outsideroom()
{
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_acid_drop::myevent_outsideroom_subcheck() {
  return (bbox_right < 0)  || (bbox_left > room_width) ||
(bbox_bottom < 0) || (bbox_top > room_height)
;
}

bool enigma::OBJ_obj_baddie_acid_drop::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_acid_man::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_acid_man)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_acid_man); it; ++it) {
      int $$$internal$$$ = obj_baddie_acid_man;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_acid_man();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_baddie_barrier)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_barrier); it; ++it) {
      int $$$internal$$$ = obj_baddie_barrier;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_barrier();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_acid_man::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  dir = choose((enigma::varargs(), - 1, 1));
  image_xscale = dir;
  image_speed = .25;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_acid_man::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}

x += dir * 4;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_acid_man::myevent_collision_obj_baddie_acid_man()
{
  if(action_if_variable(dir, 0, 1))
  {
    x = xprevious;
    dir = 1;
    image_xscale = 1;
    
  }
  if(action_if_variable(enigma::varaccess_dir(int(other)), 0, 2))
  {
    enigma::glaccess(int(other))-> x = enigma::glaccess(int(other))-> xprevious;
    enigma::varaccess_dir(int(other))=- 1;
    enigma::glaccess(int(other))-> image_xscale =- 1;
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_acid_man::myevent_collision_obj_baddie_acid_man_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_acid_man);
}

evariant enigma::OBJ_obj_baddie_acid_man::myevent_collision_obj_baddie_barrier()
{
  x = xprevious;
  dir =- dir;
  image_xscale =- image_xscale;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_acid_man::myevent_collision_obj_baddie_barrier_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_barrier);
}

bool enigma::OBJ_obj_baddie_acid_man::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_spikes_up::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_spikes_down::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_barrier::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_wood::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_wood_hor::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_wood_ver::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_wood_mid::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_destroy_trap::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_trap_up_gen::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 1;
    action_create_object(obj_baddie_trap_up, 0, 0);
    
  }
  
  {
    sprite_index =- 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_up_gen::myevent_draw()
{
  
  {
    draw_sprite(spr_baddie_trap_up_gen, 0, x, y);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_up_gen::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_baddie_trap_up_gen::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_trap_down_gen::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    argument_relative = 1;
    action_create_object(obj_baddie_trap_down, 0, 0);
    
  }
  
  {
    sprite_index =- 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_down_gen::myevent_draw()
{
  
  {
    draw_sprite(spr_baddie_trap_down_gen, 0, x, y);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_down_gen::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_baddie_trap_down_gen::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_trap_left_gen::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_baddie_trap_left_gen::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 1 + random(50);
    sprite_index =- 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_left_gen::myevent_alarm_0()
{
  
  {
    argument_relative = 1;
    action_create_object(obj_baddie_trap_left, 0, 0);
    
  }
  
  {
    alarm[int(0)]= 100 + random(50);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_left_gen::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_baddie_trap_left_gen::myevent_draw()
{
  
  {
    draw_sprite(spr_baddie_trap_left_gen, 0, x, y);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_left_gen::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_baddie_trap_left_gen::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_trap_right_gen::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_baddie_trap_right_gen::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 1 + random(50);
    sprite_index =- 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_right_gen::myevent_alarm_0()
{
  
  {
    argument_relative = 1;
    action_create_object(obj_baddie_trap_right, 0, 0);
    
  }
  
  {
    alarm[int(0)]= 100 + random(50);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_right_gen::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_baddie_trap_right_gen::myevent_draw()
{
  
  {
    draw_sprite(spr_baddie_trap_right_gen, 0, x, y);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_right_gen::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_baddie_trap_right_gen::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_trap_up::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_baddie_trap_up::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 1 + random(50);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_up::myevent_alarm_0()
{
  action_path(pth_baddie_trap_up, 8, 0, 0);
  
  {
    alarm[int(0)]= 100 + random(50);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_up::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

bool enigma::OBJ_obj_baddie_trap_up::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_trap_down::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
evariant enigma::OBJ_obj_baddie_trap_down::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    alarm[int(0)]= 1 + random(50);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_down::myevent_alarm_0()
{
  action_path(pth_baddie_trap_down, 8, 0, 0);
  
  {
    alarm[int(0)]= 100 + random(50);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_down::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

bool enigma::OBJ_obj_baddie_trap_down::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_trap_left::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_destroy_trap)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_destroy_trap); it; ++it) {
      int $$$internal$$$ = obj_baddie_destroy_trap;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_destroy_trap();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_trap_left::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    hspeed =- 8;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_left::myevent_collision_obj_baddie_destroy_trap()
{
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_left::myevent_collision_obj_baddie_destroy_trap_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_destroy_trap);
}

evariant enigma::OBJ_obj_baddie_trap_left::myevent_outsideroom()
{
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_left::myevent_outsideroom_subcheck() {
  return (bbox_right < 0)  || (bbox_left > room_width) ||
(bbox_bottom < 0) || (bbox_top > room_height)
;
}

bool enigma::OBJ_obj_baddie_trap_left::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_trap_right::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_destroy_trap)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_destroy_trap); it; ++it) {
      int $$$internal$$$ = obj_baddie_destroy_trap;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_destroy_trap();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_trap_right::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    hspeed = 8;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_trap_right::myevent_collision_obj_baddie_destroy_trap()
{
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_right::myevent_collision_obj_baddie_destroy_trap_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_destroy_trap);
}

evariant enigma::OBJ_obj_baddie_trap_right::myevent_outsideroom()
{
  action_kill_object();
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_trap_right::myevent_outsideroom_subcheck() {
  return (bbox_right < 0)  || (bbox_left > room_width) ||
(bbox_bottom < 0) || (bbox_top > room_height)
;
}

bool enigma::OBJ_obj_baddie_trap_right::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_window::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sprite_index =- 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_window::myevent_draw()
{
  
  {
    draw_sprite(spr_window, 0, x, y);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_window::myevent_draw_subcheck() {
  return visible;
}

bool enigma::OBJ_obj_window::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_coral::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_coral_hor::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_coral_ver::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_coral_mid::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_shark::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_baddie_barrier)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_barrier); it; ++it) {
      int $$$internal$$$ = obj_baddie_barrier;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_barrier();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
  if (enigma::place_meeting_inst(x, y, obj_baddie_shark)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_baddie_shark); it; ++it) {
      int $$$internal$$$ = obj_baddie_shark;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_baddie_shark();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_shark::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  dir = choose((enigma::varargs(), - 1, 1));
  image_xscale = dir;
  image_speed = .25;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_shark::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}

x += dir * 4;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_shark::myevent_collision_obj_baddie_barrier()
{
  x = xprevious;
  dir =- dir;
  image_xscale =- image_xscale;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_shark::myevent_collision_obj_baddie_barrier_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_barrier);
}

evariant enigma::OBJ_obj_baddie_shark::myevent_collision_obj_baddie_shark()
{
  if(action_if_variable(dir, 0, 1))
  {
    x = xprevious;
    dir = 1;
    image_xscale = 1;
    
  }
  if(action_if_variable(enigma::varaccess_dir(int(other)), 0, 2))
  {
    enigma::glaccess(int(other))-> x = enigma::glaccess(int(other))-> xprevious;
    enigma::varaccess_dir(int(other))=- 1;
    enigma::glaccess(int(other))-> image_xscale =- 1;
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_shark::myevent_collision_obj_baddie_shark_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_baddie_shark);
}

bool enigma::OBJ_obj_baddie_shark::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_hor::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_ver::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_mid::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_hor_large::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_ver_large::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_mid_large::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_mid_large_hor::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_rock_mid_large_ver::can_cast(int obj) const {
  return (obj==21);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_buzz_saw_1::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_path(pth_baddie_buzz_saw_1, 8, 1, 1);
  
  return 0;
}

bool enigma::OBJ_obj_baddie_buzz_saw_1::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_buzz_saw_2::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_path(pth_baddie_buzz_saw_2, 8, 1, 1);
  
  return 0;
}

bool enigma::OBJ_obj_baddie_buzz_saw_2::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_buzz_saw_3::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_path(pth_baddie_buzz_saw_3, 8, 1, 1);
  
  return 0;
}

bool enigma::OBJ_obj_baddie_buzz_saw_3::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_buzz_saw_4::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_path(pth_baddie_buzz_saw_4, 8, 1, 1);
  
  return 0;
}

bool enigma::OBJ_obj_baddie_buzz_saw_4::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_buzz_saw_5::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_path(pth_baddie_buzz_saw_5, 8, 1, 1);
  
  return 0;
}

bool enigma::OBJ_obj_baddie_buzz_saw_5::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_buzz_saw_6::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  action_path(pth_baddie_buzz_saw_6, 8, 1, 1);
  
  return 0;
}

bool enigma::OBJ_obj_baddie_buzz_saw_6::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_spike_ball_small_left::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    image_angle -= 2.5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_baddie_spike_ball_small_left::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_spike_ball_small_right::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    image_angle += 2.5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_baddie_spike_ball_small_right::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_spike_ball_large_left::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    image_angle -= 2.5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_baddie_spike_ball_large_left::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_spike_ball_large_right::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    image_angle += 2.5;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_baddie_spike_ball_large_right::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
bool enigma::OBJ_obj_baddie_fire::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_baddie_lava::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_speed = .25;
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_baddie_lava::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_fire_ball_short::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
void enigma::OBJ_obj_baddie_fire_ball_short::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_land_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_land_parent); it; ++it) {
      int $$$internal$$$ = obj_land_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_land_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_fire_ball_short::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_xscale =- 1;
    vspeed = 8;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_fire_ball_short::myevent_alarm_0()
{
  
  {
    vspeed =- 8;
    image_yscale = 1;
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_fire_ball_short::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_baddie_fire_ball_short::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    vspeed += .125;
    if((vspeed >= 0))
      image_yscale =- 1;
    if((vspeed < 0))
      image_yscale = 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_fire_ball_short::myevent_collision_obj_land_parent()
{
  
  {
    if((image_yscale ==- 1))
    {
      vspeed = 0;
      alarm[int(0)]= 1 + random(20);
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_fire_ball_short::myevent_collision_obj_land_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_land_parent);
}

bool enigma::OBJ_obj_baddie_fire_ball_short::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
void enigma::OBJ_obj_baddie_fire_ball_tall::myevent_alarm() {
  if (myevent_alarm_0_subcheck()) {
    myevent_alarm_0();
  }
}
void enigma::OBJ_obj_baddie_fire_ball_tall::myevent_collision_dispatcher() {
  if (enigma::place_meeting_inst(x, y, obj_land_parent)) {
    for (enigma::iterator it = enigma::fetch_inst_iter_by_int(obj_land_parent); it; ++it) {
      int $$$internal$$$ = obj_land_parent;
      instance_other = *it;
      if (enigma::place_meeting_inst(x,y,instance_other->id)) {
        if (enigma::glaccess(int(other))->solid &&
            enigma::place_meeting_inst(x,y,instance_other->id)) {
          x = xprevious;
          y = yprevious;
        }
        myevent_collision_obj_land_parent();
        if (enigma::glaccess(int(other))->solid) {
          x += hspeed;
          y += vspeed;
          if (enigma::place_meeting_inst(x, y, $$$internal$$$)) {
            x = xprevious;
            y = yprevious;
          }
        }
      }
    }
  }
}
evariant enigma::OBJ_obj_baddie_fire_ball_tall::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    image_xscale =- 1;
    vspeed = 16;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_fire_ball_tall::myevent_alarm_0()
{
  
  {
    vspeed =- 16;
    image_yscale = 1;
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_fire_ball_tall::myevent_alarm_0_subcheck() {
  alarm[0] = (int) alarm[0];
  return alarm[0] < 0 ? false : !((int)--alarm[0]);
}

evariant enigma::OBJ_obj_baddie_fire_ball_tall::myevent_step()
{
  if (timeline_running && timeline_speed != 0) {
  advance_curr_timeline();
}


  {
    vspeed += .25;
    if((vspeed >= 0))
      image_yscale =- 1;
    if((vspeed < 0))
      image_yscale = 1;
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_baddie_fire_ball_tall::myevent_collision_obj_land_parent()
{
  
  {
    if((image_yscale ==- 1))
    {
      vspeed = 0;
      alarm[int(0)]= 1 + random(20);
      
    }
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_baddie_fire_ball_tall::myevent_collision_obj_land_parent_subcheck() {
  return enigma::place_meeting_inst(x, y, obj_land_parent);
}

bool enigma::OBJ_obj_baddie_fire_ball_tall::can_cast(int obj) const {
  return (obj==20);
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_game_win::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    GameWinBG = sprite_create_from_screen(0, 0, window_get_width(), window_get_height(), 0, 0, 0, 0);
    instance_deactivate_all(1);
    instance_activate_object(obj_controller);
    instance_activate_object(obj_background);
    sound_stop_all();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_game_win::myevent_gameend()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sprite_delete(GameWinBG);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_game_win::myevent_draw()
{
  
  {
    draw_set_color(c_white);
    draw_sprite_stretched_ext(GameWinBG, 0, view_xview[int(1)] - 32, view_yview[int(1)] - 32, 640, 480, c_lime, 1);
    draw_sprite_ext(sprite_index, 0, view_xview[int(1)] + (view_wview[int(1)] / (double) 2), view_yview[int(1)] + (view_hview[int(1)] / (double) 2), 1, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_game_win::myevent_draw_subcheck() {
  return visible;
}

evariant enigma::OBJ_obj_game_win::myevent_keypressed_Escape()
{
  
  {
    game_end();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_game_win::myevent_keypressed_Space()
{
  
  {
    sprite_delete(GameWinBG);
    room_goto(rm_title_screen);
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_game_win::can_cast(int obj) const {
  return false;
}


// Stacked event bases and dispatchers
evariant enigma::OBJ_obj_game_lose::myevent_create()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    GameLoseBG = sprite_create_from_screen(0, 0, window_get_width(), window_get_height(), 0, 0, 0, 0);
    instance_deactivate_all(1);
    instance_activate_object(obj_controller);
    instance_activate_object(obj_background);
    sound_stop_all();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_game_lose::myevent_gameend()
{
  enigma::temp_event_scope ENIGMA_PUSH_ITERATOR_AND_VALIDATE(this);
  
  {
    sprite_delete(GameLoseBG);
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_game_lose::myevent_draw()
{
  
  {
    draw_set_color(c_white);
    draw_sprite_stretched_ext(GameLoseBG, 0, view_xview[int(1)] - 32, view_yview[int(1)] - 32, 640, 480, c_lime, 1);
    draw_sprite_ext(sprite_index, 0, view_xview[int(1)] + (view_wview[int(1)] / (double) 2), view_yview[int(1)] + (view_hview[int(1)] / (double) 2), 1, 1, 0, c_white, 1);
    
  }
  ;
  
  return 0;
}

inline bool enigma::OBJ_obj_game_lose::myevent_draw_subcheck() {
  return visible;
}

evariant enigma::OBJ_obj_game_lose::myevent_keypressed_Escape()
{
  
  {
    game_end();
    
  }
  ;
  
  return 0;
}

evariant enigma::OBJ_obj_game_lose::myevent_keypressed_Space()
{
  
  {
    sprite_delete(GameLoseBG);
    room_goto(rm_title_screen);
    
  }
  ;
  
  return 0;
}

bool enigma::OBJ_obj_game_lose::can_cast(int obj) const {
  return false;
}

namespace enigma
{
  std::vector<callable_script> callable_scripts = {
    { (evariant(*)())_SCR_create_views, 16 },
  };
  
  void constructor(object_basic* instance_b) {
    //This is the universal create event code
    object_locals* instance = (object_locals*)instance_b;
    
    instance->xstart = instance->x;
    instance->ystart = instance->y;
    instance->xprevious = instance->x;
    instance->yprevious = instance->y;
    
    instance->gravity=0;
    instance->gravity_direction=270;
    instance->friction=0;
    
    
    instance->timeline_index = -1;
    instance->timeline_running = false;
    instance->timeline_speed = 1;
    instance->timeline_position = 0;
    instance->timeline_loop = false;
    
    instance->image_alpha = 1.0;
    instance->image_angle = 0;
    instance->image_blend = 0xFFFFFF;
    instance->image_index = 0;
    instance->image_speed  = 1;
    instance->image_xscale = 1;
    instance->image_yscale = 1;
    
    instance_count++;
  }
}
