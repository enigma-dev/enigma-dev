<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>steam_set_warning_message_hook();&#13;
 &#13;
// This variable is used for game_restart() purposes.&#13;
is_game_restarting = false;&#13;
&#13;
show_debug_message("create")&#13;
&#13;
randomize();&#13;
&#13;
//#macro SteamLeaderboard "YYLeaderboard_10/29/21--"&#13;
&#13;
if (steam_initialised()) room_goto(Room_Steam_Main);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> &#13;
// This needs to be called every frame so that the extension&#13;
// gets updated you should place this call in a controller object&#13;
// that is persistent through the entire duration of you game.&#13;
steam_update();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="82" eventtype="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Game restart (part 1)&#13;
&#13;
// This prsents a game restart implementation example&#13;
// We use a variable as a flag to tell the system we are 'restarting' the game&#13;
is_game_restarting = true;&#13;
game_restart();&#13;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="69" eventtype="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>&#13;
// This function call is purely for debugging purposes&#13;
// It will log all the messages from the steam callbacks&#13;
show_debug_message("Steam ASYNC: " + json_encode(async_load))</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="3" eventtype="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Game restart (part 2)&#13;
&#13;
// This prsents a game restart implementation example&#13;
// When we reach the game end event we are either closing or restarting the game&#13;
// we now check our flag variable and we call 'steam_shutdown' only if not restarting&#13;
if (is_game_restarting == false) {&#13;
	steam_shutdown();&#13;
}&#13;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="64" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Insert description here&#13;
// You can write your code in this editor&#13;
&#13;
if (steam_initialised()) return 0;&#13;
&#13;
draw_background(ENIGMA_background, 0, 0);&#13;
&#13;
draw_set_halign(fa_center);&#13;
draw_set_valign(fa_middle);&#13;
draw_text_transformed(room_width/2, room_height/2, "You are not logged in to steam!!", 2, 2, 0);</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
