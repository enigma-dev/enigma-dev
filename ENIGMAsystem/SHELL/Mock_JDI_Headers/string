#ifndef JDI_MOCK_STRING_HEADER

#include <cstdlib>

namespace std {

template<class CharT, class Traits = void, class Allocator = void>
class basic_string {
  typedef CharT &reference;
  typedef const CharT &const_reference;
  
 public:
  typedef size_t size_type;
  static const size_type npos;
  
  struct iterator {};
  struct const_iterator {};
  struct reverse_iterator {};
  struct const_reverse_iterator {};

  basic_string& operator=(const basic_string& str);
  basic_string& operator=(const CharT* str);
  basic_string& operator=(CharT ch);
  
  basic_string(size_type count, CharT ch, const Allocator& alloc = Allocator());
  basic_string(const CharT* s, size_type count, const Allocator& alloc = Allocator());
  basic_string(const CharT* s, const Allocator& alloc = Allocator());
  template<class InputIt> basic_string(
      InputIt first, InputIt last, const Allocator& alloc = Allocator());
  basic_string(const basic_string& other);
  
  reference       at(size_type pos);
  const_reference at(size_type pos) const;
	
  reference       operator[](size_type pos);
  const_reference operator[](size_type pos) const;
  
  const CharT* data() const;
  const CharT* c_str() const;
	
  iterator begin();
  const_iterator begin() const;
  iterator end();
  const_iterator end() const;
  
  reverse_iterator rbegin();
  const_reverse_iterator rbegin() const;
  reverse_iterator rend();
  const_reverse_iterator rend() const;
  
  bool empty() const;
  size_type size() const;
  size_type length() const;
  size_type max_size() const;
  
  void reserve(size_type new_cap = 0);
  size_type capacity() const;
  void clear();
  
  basic_string& insert(size_type index, size_type count, CharT ch);
  basic_string& insert(size_type index, const CharT* s);
  basic_string& insert(size_type index, const CharT* s, size_type count);
  basic_string& insert(size_type index, const basic_string& str);
  
  basic_string& erase(size_type index = 0, size_type count = npos);
  
  void push_back(CharT ch);
  void pop_back();
  
  basic_string& append(size_type count, CharT ch);
  basic_string& append(const basic_string& str);
  basic_string& append(const CharT* s, size_type count);
  basic_string& append(const CharT* s);
  
  template<class InputIt> basic_string& append(InputIt first, InputIt last);
  
  int compare(const basic_string& str) const;
  int compare(size_type pos1, size_type count1, const basic_string& str) const;
  int compare(size_type pos1, size_type count1, const CharT* s) const;
  int compare(size_type pos1, size_type count1, const CharT* s, size_type count2) const;
  int compare(const CharT* s) const;
  
  
  template<class InputIt>
  basic_string& replace(const_iterator first, const_iterator last, InputIt first2, InputIt last2);
  basic_string& replace(size_type pos, size_type count, const basic_string& str);
  basic_string& replace(const_iterator first, const_iterator last, const basic_string& str);
  basic_string& replace(size_type pos, size_type count, const CharT* cstr, size_type count2);
  basic_string& replace(const_iterator first, const_iterator last, const CharT* cstr, size_type count2);
  basic_string& replace(size_type pos, size_type count, const CharT* cstr);
  basic_string& replace(const_iterator first, const_iterator last, const CharT* cstr);
  basic_string& replace(size_type pos, size_type count, size_type count2, CharT ch);
  basic_string& replace(const_iterator first, const_iterator last, size_type count2, CharT ch);
  
  basic_string substr(size_type pos = 0, size_type count = npos) const;
  size_type copy(CharT* dest, size_type count, size_type pos = 0) const;
  
  void resize(size_type count);
  void resize(size_type count, CharT ch);
  
  void swap(basic_string& other);
  
  size_type find(const basic_string& str, size_type pos = 0) const;
  size_type find(const CharT* s, size_type pos, size_type count) const;
  size_type find(const CharT* s, size_type pos = 0) const;
  size_type find(CharT ch, size_type pos = 0) const;
  
  size_type rfind(const basic_string& str, size_type pos = npos) const;
  size_type rfind(const CharT* s, size_type pos, size_type count) const;
  size_type rfind(const CharT* s, size_type pos = npos) const;
  size_type rfind(CharT ch, size_type pos = npos) const;
  
  size_type find_first_of(const basic_string& str, size_type pos = 0) const;
  size_type find_first_of(const CharT* s, size_type pos, size_type count) const;
  size_type find_first_of(const CharT* s, size_type pos = 0) const;
  size_type find_first_of(CharT ch, size_type pos = 0) const;
  
  size_type find_first_not_of(const basic_string& str, size_type pos = 0) const;
  size_type find_first_not_of(const CharT* s, size_type pos, size_type count) const;
  size_type find_first_not_of(const CharT* s, size_type pos = 0) const;
  size_type find_first_not_of(CharT ch, size_type pos = 0) const;
  
  size_type find_last_of(const basic_string& str, size_type pos = npos) const;
  size_type find_last_of(const CharT* s, size_type pos, size_type count) const;
  size_type find_last_of(const CharT* s, size_type pos = npos) const;
  size_type find_last_of(CharT ch, size_type pos = npos) const;
  
  size_type find_last_not_of(const basic_string& str, size_type pos = npos) const;
  size_type find_last_not_of(const CharT* s, size_type pos, size_type count) const;
  size_type find_last_not_of(const CharT* s, size_type pos = npos) const;
  size_type find_last_not_of(CharT ch, size_type pos = npos) const;
};

typedef basic_string<char> string;
typedef basic_string<wchar_t> wstring;

int        stoi(const std::string&  str, std::size_t* pos = 0, int base = 10);
int        stoi(const std::wstring& str, std::size_t* pos = 0, int base = 10);
long       stol(const std::string&  str, std::size_t* pos = 0, int base = 10);
long       stol(const std::wstring& str, std::size_t* pos = 0, int base = 10);
long long stoll(const std::string&  str, std::size_t* pos = 0, int base = 10);
long long stoll(const std::wstring& str, std::size_t* pos = 0, int base = 10);

unsigned long       stoul(const std::string&  str, std::size_t* pos = 0, int base = 10);
unsigned long       stoul(const std::wstring& str, std::size_t* pos = 0, int base = 10);
unsigned long long stoull(const std::string&  str, std::size_t* pos = 0, int base = 10);
unsigned long long stoull(const std::wstring& str, std::size_t* pos = 0, int base = 10);

float        stof(const std::string&  str, std::size_t* pos = 0);
float        stof(const std::wstring& str, std::size_t* pos = 0);
double       stod(const std::string&  str, std::size_t* pos = 0);
double       stod(const std::wstring& str, std::size_t* pos = 0);
long double stold(const std::string&  str, std::size_t* pos = 0);
long double stold(const std::wstring& str, std::size_t* pos = 0);

std::string to_string(int value);
std::string to_string(long value);
std::string to_string(long long value);
std::string to_string(unsigned value);
std::string to_string(unsigned long value);
std::string to_string(unsigned long long value);
std::string to_string(float value);
std::string to_string(double value);
std::string to_string(long double value);

}

#endif  // defined JDI_MOCK_STRING_HEADER
