/** Copyright (C) 2008-2013 Robert B. Colton, Adriano Tumminelli
*** Copyright (C) 2014 Seth N. Hetu
***
*** This file is a part of the ENIGMA Development Environment.
***
*** ENIGMA is free software: you can redistribute it and/or modify it under the
*** terms of the GNU General Public License as published by the Free Software
*** Foundation, version 3 of the license or any later version.
***
*** This application and its source code is distributed AS-IS, WITHOUT ANY
*** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
*** FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
*** details.
***
*** You should have received a copy of the GNU General Public License along
*** with this code. If not, see <http://www.gnu.org/licenses/>
**/

#include "../General/OpenGLHeaders.h"
#include "../General/GSd3d.h"
#include "../General/GSmodel.h"
#include "GLshapes.h"
#include "GLTextureStruct.h"
#include "../General/GSprimitives.h"
#include "Universal_System/var4.h"
#include "Universal_System/roomsystem.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>


using namespace std;

#define __GETR(x) ((x & 0x0000FF))/255.0
#define __GETG(x) ((x & 0x00FF00)>>8)/255.0
#define __GETB(x) ((x & 0xFF0000)>>16)/255.0

#include <iostream>
#include <map>
#include <list>
#include "Universal_System/fileio.h"
#include "Universal_System/estring.h"

#include <vector>
using std::vector;

extern GLenum ptypes_by_id[16];
namespace enigma {
  extern unsigned char currentcolor[4];

  //split a string and convert to float
  vector<float> float_split(const string& str, const char& ch) {
    string next;
    vector<float> result;

    for (string::const_iterator it = str.begin(); it != str.end(); it++)
	{
		if (*it == ch)
		{
			if (!next.empty())
			{
				result.push_back(atof(next.c_str()));
				next.clear();
			}
        } else {
            next += *it;
        }
    }
    if (!next.empty())
         result.push_back(atof(next.c_str()));
    return result;
  }

  //obj model parsing functions
  void string_parse( string *s )
  {
	size_t spaces = 0;
	bool trimmed = false;
	bool checknormal = false;
	for (unsigned int i = 0; i < s->size() ; i++)
	{
		//comment
		if ((*s)[i] == '#')
		{
			s->erase(i, s->length() - i);
			break;
		}
		else if((*s)[i] == ' ')
		{
			if (!trimmed)
			{
				s->erase(i,1);
				i--;
			}
			else
			{
				if (spaces >= 1)
				{
					s->erase(i,1);
					i--;
				}
				spaces++;
			}
		}
		else
		{
			if((*s)[i] == '/')
			{
				(*s)[i] = ' ';
				if(checknormal)
				{
					s->erase(i, 1);
					checknormal = false;
				}
				else
					checknormal = true;
			}
			else
				checknormal = false;
			spaces = 0;
			trimmed = true;
		}
	}
	//end trim
	if (s->size() > 0) {
		if ((*s)[s->size()-1] == ' ')
		{
			s->erase(s->size()-1, 1);
		}
	}
  }
}

template<int x> struct intmatch { };
template<int x> struct uintmatch { };
template<> struct intmatch<1>   { typedef int8_t type;  };
template<> struct intmatch<2>   { typedef int16_t type; };
template<> struct intmatch<4>   { typedef int32_t type; };
template<> struct intmatch<8>   { typedef int64_t type; };
template<> struct uintmatch<1>  { typedef uint8_t type;  };
template<> struct uintmatch<2>  { typedef uint16_t type; };
template<> struct uintmatch<4>  { typedef uint32_t type; };
template<> struct uintmatch<8>  { typedef uint64_t type; };
typedef uintmatch<sizeof(gs_scalar)>::type color_t;
union VertexElement {
	color_t d;
	gs_scalar f;

	VertexElement(gs_scalar v): f(v) {}
	VertexElement(color_t v): d(v) {}
};

class Mesh
{
  public:
  int modeltype; // can be static, dynamic, or stream
  bool modelbuffered; // whether a call list has been generated if the model type is static
  GLuint modellist; // call list for static models

  unsigned currentPrimitive; // The type of the current primitive being added to the model

  vector<VertexElement> vertices; // Temporary vertices container for the current primitive until they are batched
  vector<GLuint> indices; // Temporary indices that can optionally be supplied, otherwise they will get generated by the batcher.
  vector<VertexElement> triangleVertices; // The vertices added to triangle primitives batched into a single triangle list to be sent to the GPU
  vector<VertexElement> triangleIndexedVertices; // The vertices added to indexed triangle primitives batched into a single triangle list to be sent to the GPU
  vector<GLuint> triangleIndices; // The triangle indices either concatenated by batching or supplied in the temporary container.
  vector<VertexElement> lineVertices; // The vertices added to line primitives batched into a single line list to be sent to the GPU
  vector<VertexElement> lineIndexedVertices; // The vertices added to indexed line primitives batched into a single line list to be sent to the GPU
  vector<GLuint> lineIndices; // The line indices either concatenated by batching or supplied in the temporary container.
  vector<VertexElement> pointVertices; // The vertices added to point primitives batched into a single point list to be sent to the GPU
  vector<VertexElement> pointIndexedVertices; // The vertices added to indexed point primitives batched into a single point list to be sent to the GPU
  vector<GLuint> pointIndices; // The point indices either concatenated by batching or supplied in the temporary container.

  unsigned vertexStride; // whether the vertices are 2D or 3D
  bool useColors; // If colors have been added to the model
  bool useTextures; // If texture coordinates have been added
  bool useNormals; // If normals have been added

  unsigned pointCount; // The number of vertices in the point container
  unsigned triangleCount; // The number of vertices in the triangle container
  unsigned lineCount; // The number of vertices in the line container

  unsigned pointIndexedCount; // The number of point indices
  unsigned triangleIndexedCount; // The number of triangle indices
  unsigned lineIndexedCount; // The number of line indices

  //NOTE: OpenGL 1.1 models are always dynamic since they utilize vertex arrays for software vertex processing and backwards compatibility.
  Mesh (int type) {
    modeltype = type;
    modelbuffered = false;
    vertexStride = 0;
    useColors = false;
    useTextures = false;
    useNormals = false;

    pointCount = 0;
    triangleCount = 0;
    lineCount = 0;

    pointIndexedCount = 0;
    triangleIndexedCount = 0;
    lineIndexedCount = 0;

    currentPrimitive = 0;

    triangleIndexedVertices.reserve(64000);
    pointIndexedVertices.reserve(64000);
    lineIndexedVertices.reserve(64000);
    pointVertices.reserve(64000);
    pointIndices.reserve(64000);
    lineVertices.reserve(64000);
    lineIndices.reserve(64000);
    triangleVertices.reserve(64000);
    triangleIndices.reserve(64000);
    vertices.reserve(64000);
    indices.reserve(64000);

    //It might not be used if model is not static, but at least we can be consistent
    modellist = glGenLists(1);
  }

  ~Mesh() {
    glDeleteLists(modellist, 1);
  }

  void ClearData() {
    triangleVertices.clear();
    pointVertices.clear();
    lineVertices.clear();
    triangleIndexedVertices.clear();
    pointIndexedVertices.clear();
    lineIndexedVertices.clear();
    triangleIndices.clear();
    pointIndices.clear();
    lineIndices.clear();
  }

  void Clear() {
    ClearData();

    triangleIndexedVertices.reserve(64000);
    pointIndexedVertices.reserve(64000);
    lineIndexedVertices.reserve(64000);
    pointVertices.reserve(64000);
    pointIndices.reserve(64000);
    lineVertices.reserve(64000);
    lineIndices.reserve(64000);
    triangleVertices.reserve(64000);
    triangleIndices.reserve(64000);
    vertices.reserve(64000);
    indices.reserve(64000);

    vertexStride = 0;
    modelbuffered = false;
    useColors = false;
    useTextures = false;
    useNormals = false;

    pointCount = 0;
    triangleCount = 0;
    lineCount = 0;
    pointIndexedCount = 0;
    triangleIndexedCount = 0;
    lineIndexedCount = 0;
  }

  GLsizei GetStride() {
    GLsizei stride = vertexStride;
    if (useNormals) stride += 3;
    if (useTextures) stride += 2;
    if (useColors) stride += 1;
    return stride;
  }

  void Begin(int pt)
  {
    currentPrimitive = pt;
  }

  void AddVertex(gs_scalar x, gs_scalar y)
  {
    vertices.push_back(x); vertices.push_back(y);
    vertexStride = 2;
  }

  void AddVertex(gs_scalar x, gs_scalar y, gs_scalar z)
  {
    vertices.push_back(x); vertices.push_back(y); vertices.push_back(z);
    vertexStride = 3;
  }

  void AddIndex(unsigned ind)
  {
    indices.push_back(ind);
  }

  void AddNormal(gs_scalar nx, gs_scalar ny, gs_scalar nz)
  {
    vertices.push_back(nx); vertices.push_back(ny); vertices.push_back(nz);
    useNormals = true;
  }

  void AddTexture(gs_scalar tx, gs_scalar ty)
  {
    vertices.push_back(tx); vertices.push_back(ty);
    useTextures = true;
  }

  void AddColor(int col, double alpha)
  {
    color_t finalcol = col + ((unsigned char)(alpha*255) << 24);
    vertices.push_back(finalcol);
    useColors = true;
  }

  void End()
  {
	//NOTE: This batching only checks for degenerate primitives on triangle strips and fans since the GPU does not render triangles where the two
	//vertices are exactly the same, triangle lists could also check for degenerates, it is unknown whether the GPU will render a degenerative
	//in a line strip primitive.

	unsigned stride = GetStride();
	if (vertices.size() == 0) return;

	// Primitive has ended so now we need to batch the vertices that were given into single lists, eg. line list, triangle list, point list
	// Indices are optionally supplied, model functions can also be added for the end user to supply the indexing themselves for each primitive
	// but the batching system does not care either way if they are not supplied it will automatically generate them.
	switch (currentPrimitive) {
		case enigma_user::pr_pointlist:
			if (indices.size() > 0) {
				pointIndexedVertices.insert(pointIndexedVertices.end(), vertices.begin(), vertices.end());
				pointIndexedCount += vertices.size() / stride;
				for (std::vector<GLuint>::iterator it = indices.begin(); it != indices.end(); ++it) { *it += pointCount; }
				pointIndices.insert(pointIndices.end(), indices.begin(), indices.end());
			} else {
				pointVertices.insert(pointVertices.end(), vertices.begin(), vertices.end());
				pointCount += vertices.size() / stride;
			}
			break;
		case enigma_user::pr_linelist:
			if (indices.size() > 0) {
				lineIndexedVertices.insert(lineIndexedVertices.end(), vertices.begin(), vertices.end());
				lineIndexedCount += vertices.size() / stride;
				for (std::vector<GLuint>::iterator it = indices.begin(); it != indices.end(); ++it) { *it += lineCount; }
				lineIndices.insert(lineIndices.end(), indices.begin(), indices.end());
			} else {
				lineVertices.insert(lineVertices.end(), vertices.begin(), vertices.end());
				lineCount += vertices.size() / stride;
			}
			break;
		case enigma_user::pr_linestrip:
			lineIndexedVertices.insert(lineIndexedVertices.end(), vertices.begin(), vertices.end());
			if (indices.size() > 0) {
				for (std::vector<GLuint>::iterator it = indices.begin(); it != indices.end(); ++it) { *it += lineIndexedCount; }
				for (unsigned i = 0; i < indices.size() - 2; i++) {
					lineIndices.push_back(indices[i]);
					lineIndices.push_back(indices[i + 1]);
				}
			} else {
				for (unsigned i = 0; i < vertices.size() / stride - 1; i++) {
					lineIndices.push_back(lineIndexedCount + i);
					lineIndices.push_back(lineIndexedCount + i + 1);
				}
			}
			lineIndexedCount += vertices.size() / stride;
			break;
		case enigma_user::pr_trianglelist:
			if (indices.size() > 0) {
				triangleIndexedVertices.insert(triangleIndexedVertices.end(), vertices.begin(), vertices.end());
				triangleIndexedCount += vertices.size() / stride;
				for (std::vector<GLuint>::iterator it = indices.begin(); it != indices.end(); ++it) { *it += triangleCount; }
				triangleIndices.insert(triangleIndices.end(), indices.begin(), indices.end());
			} else {
				triangleVertices.insert(triangleVertices.end(), vertices.begin(), vertices.end());
				triangleCount += vertices.size() / stride;
			}
			break;
		case enigma_user::pr_trianglestrip:
			triangleIndexedVertices.insert(triangleIndexedVertices.end(), vertices.begin(), vertices.end());
			if (indices.size() > 0) {
				for (std::vector<GLuint>::iterator it = indices.begin(); it != indices.end(); ++it) { *it += triangleIndexedCount; }
				for (unsigned i = 0; i < indices.size() - 2; i++) {
					// check for and continue if indexed triangle is degenerate, because the GPU won't render it anyway
					if (indices[i] == indices[i + 1] || indices[i] == indices[i + 2]  || indices[i + 1] == indices[i + 2] ) { continue; }
					if (i % 2) {
                        triangleIndices.push_back(indices[i+1]);
                        triangleIndices.push_back(indices[i]);
                        triangleIndices.push_back(indices[i+2]);
					}else{
                        triangleIndices.push_back(indices[i]);
                        triangleIndices.push_back(indices[i+1]);
                        triangleIndices.push_back(indices[i+2]);
					}
				}
			} else {
				for (unsigned i = 0; i < vertices.size() / stride - 2; i++) {
					if (i % 2) {
						triangleIndices.push_back(triangleIndexedCount + i + 2);
						triangleIndices.push_back(triangleIndexedCount + i + 1);
						triangleIndices.push_back(triangleIndexedCount + i);
					} else {
						triangleIndices.push_back(triangleIndexedCount + i);
						triangleIndices.push_back(triangleIndexedCount + i + 1);
						triangleIndices.push_back(triangleIndexedCount + i + 2);
					}
				}
			}
			triangleIndexedCount += vertices.size() / stride;
			break;
		case enigma_user::pr_trianglefan:
			triangleIndexedVertices.insert(triangleIndexedVertices.end(), vertices.begin(), vertices.end());
			if (indices.size() > 0) {
				for (std::vector<GLuint>::iterator it = indices.begin(); it != indices.end(); ++it) { *it += triangleIndexedCount; }
				for (unsigned i = 1; i < indices.size() - 1; i++) {
					// check for and continue if indexed triangle is degenerate, because the GPU won't render it anyway
					if (indices[0] == indices[i] || indices[0] == indices[i + 1]  || indices[i] == indices[i + 1] ) { continue; }
					triangleIndices.push_back(indices[0]);
					triangleIndices.push_back(indices[i]);
					triangleIndices.push_back(indices[i + 1]);
				}
			} else {
				for (unsigned i = 1; i < vertices.size() / stride - 1; i++) {
					triangleIndices.push_back(triangleIndexedCount);
					triangleIndices.push_back(triangleIndexedCount + i);
					triangleIndices.push_back(triangleIndexedCount + i + 1);
				}
			}
			triangleIndexedCount += vertices.size() / stride;
			break;
	}

    // Clean up the temporary vertex and index containers now that they have been batched efficiently.
    vertices.clear();
    indices.clear();
  }

  void DrawElements(GLenum mode, vector<VertexElement> &verts, vector<GLuint> &inds, GLsizei count, int vert_start = 0) {
    if (!count) {
      return;
    }

    // Calculate the number of bytes to get to the next vertex
    GLsizei stride = GetStride() * sizeof( gs_scalar );

    #define OFFSET( P )  ( char* ) ( &verts[0] ) + ( ( sizeof( gs_scalar ) * ( P         ) ) )
    GLsizei STRIDE = stride;

    // Enable vertex array's for fast vertex processing
    unsigned offset = 0;
    glVertexPointer( vertexStride, GL_FLOAT, STRIDE, OFFSET(offset) ); // Set the vertex pointer
    offset += vertexStride;

    if (useNormals){
      glNormalPointer( GL_FLOAT, STRIDE, OFFSET(offset) ); // Set the normal pointer to the offset in the array
      offset += 3;
    }

    if (useTextures){
      glTexCoordPointer( 2, GL_FLOAT, STRIDE,  OFFSET(offset) ); // Set the texture pointer to the offset in the array
      offset += 2;
    }

    if (useColors){
      glColorPointer( 4, GL_UNSIGNED_BYTE, STRIDE, OFFSET(offset)); // Set the color pointer to the offset in the array
    }

    glDrawElements(mode, count, GL_UNSIGNED_INT, &inds[vert_start]);
  }

  void DrawArrays(GLenum mode, vector<VertexElement> &verts, GLsizei count, int vert_start = 0) {
    if (!count) {
      return;
    }

    // Calculate the number of bytes to get to the next vertex
    GLsizei stride = GetStride() * sizeof( gs_scalar );

    #define OFFSET( P )  ( char* ) ( &verts[0] ) + ( ( sizeof( gs_scalar ) * ( P         ) ) )
    GLsizei STRIDE = stride;

    // Enable vertex array's for fast vertex processing
    unsigned offset = 0;
    glVertexPointer( vertexStride, GL_FLOAT, STRIDE, OFFSET(offset) ); // Set the vertex pointer
    offset += vertexStride;

    if (useNormals){
      glNormalPointer( GL_FLOAT, STRIDE, OFFSET(offset) ); // Set the normal pointer to the offset in the array
      offset += 3;
    }

    if (useTextures){
      glTexCoordPointer( 2, GL_FLOAT, STRIDE,  OFFSET(offset) ); // Set the texture pointer to the offset in the array
      offset += 2;
    }

    if (useColors){
      glColorPointer( 4, GL_UNSIGNED_BYTE, STRIDE, OFFSET(offset)); // Set the color pointer to the offset in the array
    }

    glDrawArrays(mode, vert_start, count);
  }

  void DrawCalls(int vertex_start = 0, int vertex_count = -1) {
    glEnableClientState(GL_VERTEX_ARRAY);
    if (useNormals) glEnableClientState(GL_NORMAL_ARRAY);
    if (useTextures) glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    if (useColors) glEnableClientState(GL_COLOR_ARRAY);

    //TODO: Right now vertex count override only works with triangles
    // Draw the batched and indexed primitives
    if (triangleIndexedCount > 0) {
      DrawElements(GL_TRIANGLES, triangleIndexedVertices, triangleIndices, (vertex_count==-1?triangleIndices.size():vertex_count), vertex_start);
    }
    if (lineIndexedCount > 0) {
      DrawElements(GL_LINES, lineIndexedVertices, lineIndices, lineIndices.size());
    }
    if (pointIndexedCount > 0) {
      DrawElements(GL_POINTS, pointIndexedVertices, pointIndices, pointIndices.size());
    }

    // Draw the unbatched and unindexed primitives
    if (triangleCount > 0) {
      DrawArrays(GL_TRIANGLES, triangleVertices, (vertex_count==-1?triangleCount:vertex_count), vertex_start);
    }
    if (lineCount > 0) {
      DrawArrays(GL_LINES, lineVertices, lineCount);
    }
    if (pointCount > 0) {
      DrawArrays(GL_POINTS, pointVertices, pointCount);
    }

    glDisableClientState(GL_VERTEX_ARRAY);
    if (useTextures) glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    if (useNormals) glDisableClientState(GL_NORMAL_ARRAY);
    if (useColors) glDisableClientState(GL_COLOR_ARRAY);
  }

  void Draw(int vertex_start = 0, int vertex_count = -1)
  {
    if (modeltype == enigma_user::model_static) {
      if (!modelbuffered) {
        modelbuffered = true;
        glNewList(modellist, GL_COMPILE);
          DrawCalls(vertex_start, vertex_count);
        glEndList();
        ClearData();
      }
      enigma::graphics_samplers_apply();
      glCallList(modellist);
    } else {
      enigma::graphics_samplers_apply();
      DrawCalls(vertex_start, vertex_count);
    }
  }
};

extern vector<Mesh*> meshes;
