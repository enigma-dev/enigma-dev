// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BACKGROUND_H_
#define FLATBUFFERS_GENERATED_BACKGROUND_H_

#include "flatbuffers/flatbuffers.h"

struct Image;

struct Background;

struct Image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_DATA = 8
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(Image::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(Image::VT_HEIGHT, height, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  explicit ImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ImageBuilder &operator=(const ImageBuilder &);
  flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline flatbuffers::Offset<Image> CreateImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<Image> CreateImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    const std::vector<int8_t> *data = nullptr) {
  return CreateImage(
      _fbb,
      width,
      height,
      data ? _fbb.CreateVector<int8_t>(*data) : 0);
}

struct Background FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_TRANSPARENT = 8,
    VT_SMOOTH_EDGES = 10,
    VT_PRELOAD = 12,
    VT_USE_AS_TILESET = 14,
    VT_TILE_WIDTH = 16,
    VT_TILE_HEIGHT = 18,
    VT_HORIZONTAL_OFFSET = 20,
    VT_VERTICAL_OFFSET = 22,
    VT_HORIZONTAL_SEPARATION = 24,
    VT_VERTICAL_SEPARATION = 26,
    VT_IMAGE = 28
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool transparent() const {
    return GetField<uint8_t>(VT_TRANSPARENT, 0) != 0;
  }
  bool smooth_edges() const {
    return GetField<uint8_t>(VT_SMOOTH_EDGES, 0) != 0;
  }
  bool preload() const {
    return GetField<uint8_t>(VT_PRELOAD, 0) != 0;
  }
  bool use_as_tileset() const {
    return GetField<uint8_t>(VT_USE_AS_TILESET, 0) != 0;
  }
  int32_t tile_width() const {
    return GetField<int32_t>(VT_TILE_WIDTH, 0);
  }
  int32_t tile_height() const {
    return GetField<int32_t>(VT_TILE_HEIGHT, 0);
  }
  int32_t horizontal_offset() const {
    return GetField<int32_t>(VT_HORIZONTAL_OFFSET, 0);
  }
  int32_t vertical_offset() const {
    return GetField<int32_t>(VT_VERTICAL_OFFSET, 0);
  }
  int32_t horizontal_separation() const {
    return GetField<int32_t>(VT_HORIZONTAL_SEPARATION, 0);
  }
  int32_t vertical_separation() const {
    return GetField<int32_t>(VT_VERTICAL_SEPARATION, 0);
  }
  const Image *image() const {
    return GetPointer<const Image *>(VT_IMAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_TRANSPARENT) &&
           VerifyField<uint8_t>(verifier, VT_SMOOTH_EDGES) &&
           VerifyField<uint8_t>(verifier, VT_PRELOAD) &&
           VerifyField<uint8_t>(verifier, VT_USE_AS_TILESET) &&
           VerifyField<int32_t>(verifier, VT_TILE_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_TILE_HEIGHT) &&
           VerifyField<int32_t>(verifier, VT_HORIZONTAL_OFFSET) &&
           VerifyField<int32_t>(verifier, VT_VERTICAL_OFFSET) &&
           VerifyField<int32_t>(verifier, VT_HORIZONTAL_SEPARATION) &&
           VerifyField<int32_t>(verifier, VT_VERTICAL_SEPARATION) &&
           VerifyOffset(verifier, VT_IMAGE) &&
           verifier.VerifyTable(image()) &&
           verifier.EndTable();
  }
};

struct BackgroundBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Background::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Background::VT_ID, id, 0);
  }
  void add_transparent(bool transparent) {
    fbb_.AddElement<uint8_t>(Background::VT_TRANSPARENT, static_cast<uint8_t>(transparent), 0);
  }
  void add_smooth_edges(bool smooth_edges) {
    fbb_.AddElement<uint8_t>(Background::VT_SMOOTH_EDGES, static_cast<uint8_t>(smooth_edges), 0);
  }
  void add_preload(bool preload) {
    fbb_.AddElement<uint8_t>(Background::VT_PRELOAD, static_cast<uint8_t>(preload), 0);
  }
  void add_use_as_tileset(bool use_as_tileset) {
    fbb_.AddElement<uint8_t>(Background::VT_USE_AS_TILESET, static_cast<uint8_t>(use_as_tileset), 0);
  }
  void add_tile_width(int32_t tile_width) {
    fbb_.AddElement<int32_t>(Background::VT_TILE_WIDTH, tile_width, 0);
  }
  void add_tile_height(int32_t tile_height) {
    fbb_.AddElement<int32_t>(Background::VT_TILE_HEIGHT, tile_height, 0);
  }
  void add_horizontal_offset(int32_t horizontal_offset) {
    fbb_.AddElement<int32_t>(Background::VT_HORIZONTAL_OFFSET, horizontal_offset, 0);
  }
  void add_vertical_offset(int32_t vertical_offset) {
    fbb_.AddElement<int32_t>(Background::VT_VERTICAL_OFFSET, vertical_offset, 0);
  }
  void add_horizontal_separation(int32_t horizontal_separation) {
    fbb_.AddElement<int32_t>(Background::VT_HORIZONTAL_SEPARATION, horizontal_separation, 0);
  }
  void add_vertical_separation(int32_t vertical_separation) {
    fbb_.AddElement<int32_t>(Background::VT_VERTICAL_SEPARATION, vertical_separation, 0);
  }
  void add_image(flatbuffers::Offset<Image> image) {
    fbb_.AddOffset(Background::VT_IMAGE, image);
  }
  explicit BackgroundBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BackgroundBuilder &operator=(const BackgroundBuilder &);
  flatbuffers::Offset<Background> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Background>(end);
    return o;
  }
};

inline flatbuffers::Offset<Background> CreateBackground(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    bool transparent = false,
    bool smooth_edges = false,
    bool preload = false,
    bool use_as_tileset = false,
    int32_t tile_width = 0,
    int32_t tile_height = 0,
    int32_t horizontal_offset = 0,
    int32_t vertical_offset = 0,
    int32_t horizontal_separation = 0,
    int32_t vertical_separation = 0,
    flatbuffers::Offset<Image> image = 0) {
  BackgroundBuilder builder_(_fbb);
  builder_.add_image(image);
  builder_.add_vertical_separation(vertical_separation);
  builder_.add_horizontal_separation(horizontal_separation);
  builder_.add_vertical_offset(vertical_offset);
  builder_.add_horizontal_offset(horizontal_offset);
  builder_.add_tile_height(tile_height);
  builder_.add_tile_width(tile_width);
  builder_.add_id(id);
  builder_.add_name(name);
  builder_.add_use_as_tileset(use_as_tileset);
  builder_.add_preload(preload);
  builder_.add_smooth_edges(smooth_edges);
  builder_.add_transparent(transparent);
  return builder_.Finish();
}

inline flatbuffers::Offset<Background> CreateBackgroundDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t id = 0,
    bool transparent = false,
    bool smooth_edges = false,
    bool preload = false,
    bool use_as_tileset = false,
    int32_t tile_width = 0,
    int32_t tile_height = 0,
    int32_t horizontal_offset = 0,
    int32_t vertical_offset = 0,
    int32_t horizontal_separation = 0,
    int32_t vertical_separation = 0,
    flatbuffers::Offset<Image> image = 0) {
  return CreateBackground(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      transparent,
      smooth_edges,
      preload,
      use_as_tileset,
      tile_width,
      tile_height,
      horizontal_offset,
      vertical_offset,
      horizontal_separation,
      vertical_separation,
      image);
}

inline const Background *GetBackground(const void *buf) {
  return flatbuffers::GetRoot<Background>(buf);
}

inline bool VerifyBackgroundBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Background>(nullptr);
}

inline void FinishBackgroundBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Background> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_BACKGROUND_H_
