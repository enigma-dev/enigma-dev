// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Background.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Background.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class BackgroundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Background>
     _instance;
} _Background_default_instance_;

namespace protobuf_Background_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, transparent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, smoothedges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, preload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, useastileset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, tilewidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, tileheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, hoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, voffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, hsep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, vsep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, image_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Background)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Background_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Background.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_Image_2eproto::InitDefaults();
  _Background_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Background_default_instance_);_Background_default_instance_._instance.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020Background.proto\032\013Image.proto\"\363\001\n\nBack"
      "ground\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\023\n\013tran"
      "sparent\030\003 \001(\010\022\023\n\013smoothEdges\030\004 \001(\010\022\017\n\007pr"
      "eload\030\005 \001(\010\022\024\n\014useAsTileset\030\006 \001(\010\022\021\n\ttil"
      "eWidth\030\007 \001(\005\022\022\n\ntileHeight\030\010 \001(\005\022\017\n\007hOff"
      "set\030\t \001(\005\022\017\n\007vOffset\030\n \001(\005\022\014\n\004hSep\030\013 \001(\005"
      "\022\014\n\004vSep\030\014 \001(\005\022\025\n\005image\030\r \001(\0132\006.Imageb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Background.proto", &protobuf_RegisterTypes);
  ::protobuf_Image_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Background_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Background::kNameFieldNumber;
const int Background::kIdFieldNumber;
const int Background::kTransparentFieldNumber;
const int Background::kSmoothEdgesFieldNumber;
const int Background::kPreloadFieldNumber;
const int Background::kUseAsTilesetFieldNumber;
const int Background::kTileWidthFieldNumber;
const int Background::kTileHeightFieldNumber;
const int Background::kHOffsetFieldNumber;
const int Background::kVOffsetFieldNumber;
const int Background::kHSepFieldNumber;
const int Background::kVSepFieldNumber;
const int Background::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Background::Background()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Background_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Background)
}
Background::Background(const Background& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vsep_) -
    reinterpret_cast<char*>(&id_)) + sizeof(vsep_));
  // @@protoc_insertion_point(copy_constructor:Background)
}

void Background::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vsep_) -
      reinterpret_cast<char*>(&image_)) + sizeof(vsep_));
  _cached_size_ = 0;
}

Background::~Background() {
  // @@protoc_insertion_point(destructor:Background)
  SharedDtor();
}

void Background::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void Background::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Background::descriptor() {
  protobuf_Background_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Background_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Background& Background::default_instance() {
  protobuf_Background_2eproto::InitDefaults();
  return *internal_default_instance();
}

Background* Background::New(::google::protobuf::Arena* arena) const {
  Background* n = new Background;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Background::Clear() {
// @@protoc_insertion_point(message_clear_start:Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vsep_) -
      reinterpret_cast<char*>(&id_)) + sizeof(vsep_));
  _internal_metadata_.Clear();
}

bool Background::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Background)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Background.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool transparent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool smoothEdges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smoothedges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool useAsTileset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useastileset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tileWidth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilewidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tileHeight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hOffset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vOffset = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hSep = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hsep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vSep = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vsep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Image image = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Background)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Background)
  return false;
#undef DO_
}

void Background::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Background.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // bool transparent = 3;
  if (this->transparent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transparent(), output);
  }

  // bool smoothEdges = 4;
  if (this->smoothedges() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->smoothedges(), output);
  }

  // bool preload = 5;
  if (this->preload() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->preload(), output);
  }

  // bool useAsTileset = 6;
  if (this->useastileset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->useastileset(), output);
  }

  // int32 tileWidth = 7;
  if (this->tilewidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tilewidth(), output);
  }

  // int32 tileHeight = 8;
  if (this->tileheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tileheight(), output);
  }

  // int32 hOffset = 9;
  if (this->hoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hoffset(), output);
  }

  // int32 vOffset = 10;
  if (this->voffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->voffset(), output);
  }

  // int32 hSep = 11;
  if (this->hsep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hsep(), output);
  }

  // int32 vSep = 12;
  if (this->vsep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vsep(), output);
  }

  // .Image image = 13;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->image_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Background)
}

::google::protobuf::uint8* Background::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Background.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // bool transparent = 3;
  if (this->transparent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transparent(), target);
  }

  // bool smoothEdges = 4;
  if (this->smoothedges() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->smoothedges(), target);
  }

  // bool preload = 5;
  if (this->preload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->preload(), target);
  }

  // bool useAsTileset = 6;
  if (this->useastileset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->useastileset(), target);
  }

  // int32 tileWidth = 7;
  if (this->tilewidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tilewidth(), target);
  }

  // int32 tileHeight = 8;
  if (this->tileheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tileheight(), target);
  }

  // int32 hOffset = 9;
  if (this->hoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hoffset(), target);
  }

  // int32 vOffset = 10;
  if (this->voffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->voffset(), target);
  }

  // int32 hSep = 11;
  if (this->hsep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hsep(), target);
  }

  // int32 vSep = 12;
  if (this->vsep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vsep(), target);
  }

  // .Image image = 13;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->image_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Background)
  return target;
}

size_t Background::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Background)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Image image = 13;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool transparent = 3;
  if (this->transparent() != 0) {
    total_size += 1 + 1;
  }

  // bool smoothEdges = 4;
  if (this->smoothedges() != 0) {
    total_size += 1 + 1;
  }

  // bool preload = 5;
  if (this->preload() != 0) {
    total_size += 1 + 1;
  }

  // bool useAsTileset = 6;
  if (this->useastileset() != 0) {
    total_size += 1 + 1;
  }

  // int32 tileWidth = 7;
  if (this->tilewidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tilewidth());
  }

  // int32 tileHeight = 8;
  if (this->tileheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tileheight());
  }

  // int32 hOffset = 9;
  if (this->hoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hoffset());
  }

  // int32 vOffset = 10;
  if (this->voffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->voffset());
  }

  // int32 hSep = 11;
  if (this->hsep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hsep());
  }

  // int32 vSep = 12;
  if (this->vsep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vsep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Background::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Background)
  GOOGLE_DCHECK_NE(&from, this);
  const Background* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Background>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Background)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Background)
    MergeFrom(*source);
  }
}

void Background::MergeFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Background)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.transparent() != 0) {
    set_transparent(from.transparent());
  }
  if (from.smoothedges() != 0) {
    set_smoothedges(from.smoothedges());
  }
  if (from.preload() != 0) {
    set_preload(from.preload());
  }
  if (from.useastileset() != 0) {
    set_useastileset(from.useastileset());
  }
  if (from.tilewidth() != 0) {
    set_tilewidth(from.tilewidth());
  }
  if (from.tileheight() != 0) {
    set_tileheight(from.tileheight());
  }
  if (from.hoffset() != 0) {
    set_hoffset(from.hoffset());
  }
  if (from.voffset() != 0) {
    set_voffset(from.voffset());
  }
  if (from.hsep() != 0) {
    set_hsep(from.hsep());
  }
  if (from.vsep() != 0) {
    set_vsep(from.vsep());
  }
}

void Background::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Background::CopyFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Background::IsInitialized() const {
  return true;
}

void Background::Swap(Background* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Background::InternalSwap(Background* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(image_, other->image_);
  swap(id_, other->id_);
  swap(transparent_, other->transparent_);
  swap(smoothedges_, other->smoothedges_);
  swap(preload_, other->preload_);
  swap(useastileset_, other->useastileset_);
  swap(tilewidth_, other->tilewidth_);
  swap(tileheight_, other->tileheight_);
  swap(hoffset_, other->hoffset_);
  swap(voffset_, other->voffset_);
  swap(hsep_, other->hsep_);
  swap(vsep_, other->vsep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Background::GetMetadata() const {
  protobuf_Background_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Background_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Background

// string name = 1;
void Background::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Background::name() const {
  // @@protoc_insertion_point(field_get:Background.name)
  return name_.GetNoArena();
}
void Background::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Background.name)
}
#if LANG_CXX11
void Background::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Background.name)
}
#endif
void Background::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Background.name)
}
void Background::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Background.name)
}
::std::string* Background::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Background.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Background::release_name() {
  // @@protoc_insertion_point(field_release:Background.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Background::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Background.name)
}

// int32 id = 2;
void Background::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Background::id() const {
  // @@protoc_insertion_point(field_get:Background.id)
  return id_;
}
void Background::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Background.id)
}

// bool transparent = 3;
void Background::clear_transparent() {
  transparent_ = false;
}
bool Background::transparent() const {
  // @@protoc_insertion_point(field_get:Background.transparent)
  return transparent_;
}
void Background::set_transparent(bool value) {
  
  transparent_ = value;
  // @@protoc_insertion_point(field_set:Background.transparent)
}

// bool smoothEdges = 4;
void Background::clear_smoothedges() {
  smoothedges_ = false;
}
bool Background::smoothedges() const {
  // @@protoc_insertion_point(field_get:Background.smoothEdges)
  return smoothedges_;
}
void Background::set_smoothedges(bool value) {
  
  smoothedges_ = value;
  // @@protoc_insertion_point(field_set:Background.smoothEdges)
}

// bool preload = 5;
void Background::clear_preload() {
  preload_ = false;
}
bool Background::preload() const {
  // @@protoc_insertion_point(field_get:Background.preload)
  return preload_;
}
void Background::set_preload(bool value) {
  
  preload_ = value;
  // @@protoc_insertion_point(field_set:Background.preload)
}

// bool useAsTileset = 6;
void Background::clear_useastileset() {
  useastileset_ = false;
}
bool Background::useastileset() const {
  // @@protoc_insertion_point(field_get:Background.useAsTileset)
  return useastileset_;
}
void Background::set_useastileset(bool value) {
  
  useastileset_ = value;
  // @@protoc_insertion_point(field_set:Background.useAsTileset)
}

// int32 tileWidth = 7;
void Background::clear_tilewidth() {
  tilewidth_ = 0;
}
::google::protobuf::int32 Background::tilewidth() const {
  // @@protoc_insertion_point(field_get:Background.tileWidth)
  return tilewidth_;
}
void Background::set_tilewidth(::google::protobuf::int32 value) {
  
  tilewidth_ = value;
  // @@protoc_insertion_point(field_set:Background.tileWidth)
}

// int32 tileHeight = 8;
void Background::clear_tileheight() {
  tileheight_ = 0;
}
::google::protobuf::int32 Background::tileheight() const {
  // @@protoc_insertion_point(field_get:Background.tileHeight)
  return tileheight_;
}
void Background::set_tileheight(::google::protobuf::int32 value) {
  
  tileheight_ = value;
  // @@protoc_insertion_point(field_set:Background.tileHeight)
}

// int32 hOffset = 9;
void Background::clear_hoffset() {
  hoffset_ = 0;
}
::google::protobuf::int32 Background::hoffset() const {
  // @@protoc_insertion_point(field_get:Background.hOffset)
  return hoffset_;
}
void Background::set_hoffset(::google::protobuf::int32 value) {
  
  hoffset_ = value;
  // @@protoc_insertion_point(field_set:Background.hOffset)
}

// int32 vOffset = 10;
void Background::clear_voffset() {
  voffset_ = 0;
}
::google::protobuf::int32 Background::voffset() const {
  // @@protoc_insertion_point(field_get:Background.vOffset)
  return voffset_;
}
void Background::set_voffset(::google::protobuf::int32 value) {
  
  voffset_ = value;
  // @@protoc_insertion_point(field_set:Background.vOffset)
}

// int32 hSep = 11;
void Background::clear_hsep() {
  hsep_ = 0;
}
::google::protobuf::int32 Background::hsep() const {
  // @@protoc_insertion_point(field_get:Background.hSep)
  return hsep_;
}
void Background::set_hsep(::google::protobuf::int32 value) {
  
  hsep_ = value;
  // @@protoc_insertion_point(field_set:Background.hSep)
}

// int32 vSep = 12;
void Background::clear_vsep() {
  vsep_ = 0;
}
::google::protobuf::int32 Background::vsep() const {
  // @@protoc_insertion_point(field_get:Background.vSep)
  return vsep_;
}
void Background::set_vsep(::google::protobuf::int32 value) {
  
  vsep_ = value;
  // @@protoc_insertion_point(field_set:Background.vSep)
}

// .Image image = 13;
bool Background::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void Background::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::Image& Background::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:Background.image)
  return p != NULL ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
::Image* Background::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::Image;
  }
  // @@protoc_insertion_point(field_mutable:Background.image)
  return image_;
}
::Image* Background::release_image() {
  // @@protoc_insertion_point(field_release:Background.image)
  
  ::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void Background::set_allocated_image(::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Background.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
