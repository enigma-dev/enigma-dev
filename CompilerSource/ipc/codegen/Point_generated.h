// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT_H_
#define FLATBUFFERS_GENERATED_POINT_H_

#include "flatbuffers/flatbuffers.h"

struct Point;

MANUALLY_ALIGNED_STRUCT(4) Point FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Point() {
    memset(this, 0, sizeof(Point));
  }
  Point(int32_t _x, int32_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
STRUCT_END(Point, 8);

#endif  // FLATBUFFERS_GENERATED_POINT_H_
