// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADER_H_
#define FLATBUFFERS_GENERATED_SHADER_H_

#include "flatbuffers/flatbuffers.h"

struct Shader;

enum ShaderType {
  ShaderType_GLSL = 0,
  ShaderType_GLSLES = 1,
  ShaderType_HLSL9 = 2,
  ShaderType_HLSL11 = 3,
  ShaderType_MIN = ShaderType_GLSL,
  ShaderType_MAX = ShaderType_HLSL11
};

inline ShaderType (&EnumValuesShaderType())[4] {
  static ShaderType values[] = {
    ShaderType_GLSL,
    ShaderType_GLSLES,
    ShaderType_HLSL9,
    ShaderType_HLSL11
  };
  return values;
}

inline const char **EnumNamesShaderType() {
  static const char *names[] = {
    "GLSL",
    "GLSLES",
    "HLSL9",
    "HLSL11",
    nullptr
  };
  return names;
}

inline const char *EnumNameShaderType(ShaderType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesShaderType()[index];
}

struct Shader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_TYPE = 8,
    VT_PRECOMPILE = 10,
    VT_VERTEX_CODE = 12,
    VT_FRAGMENT_CODE = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  ShaderType type() const {
    return static_cast<ShaderType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool precompile() const {
    return GetField<uint8_t>(VT_PRECOMPILE, 0) != 0;
  }
  const flatbuffers::String *vertex_code() const {
    return GetPointer<const flatbuffers::String *>(VT_VERTEX_CODE);
  }
  const flatbuffers::String *fragment_code() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAGMENT_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_PRECOMPILE) &&
           VerifyOffset(verifier, VT_VERTEX_CODE) &&
           verifier.Verify(vertex_code()) &&
           VerifyOffset(verifier, VT_FRAGMENT_CODE) &&
           verifier.Verify(fragment_code()) &&
           verifier.EndTable();
  }
};

struct ShaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Shader::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Shader::VT_ID, id, 0);
  }
  void add_type(ShaderType type) {
    fbb_.AddElement<int8_t>(Shader::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_precompile(bool precompile) {
    fbb_.AddElement<uint8_t>(Shader::VT_PRECOMPILE, static_cast<uint8_t>(precompile), 0);
  }
  void add_vertex_code(flatbuffers::Offset<flatbuffers::String> vertex_code) {
    fbb_.AddOffset(Shader::VT_VERTEX_CODE, vertex_code);
  }
  void add_fragment_code(flatbuffers::Offset<flatbuffers::String> fragment_code) {
    fbb_.AddOffset(Shader::VT_FRAGMENT_CODE, fragment_code);
  }
  explicit ShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderBuilder &operator=(const ShaderBuilder &);
  flatbuffers::Offset<Shader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Shader>(end);
    return o;
  }
};

inline flatbuffers::Offset<Shader> CreateShader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    ShaderType type = ShaderType_GLSL,
    bool precompile = false,
    flatbuffers::Offset<flatbuffers::String> vertex_code = 0,
    flatbuffers::Offset<flatbuffers::String> fragment_code = 0) {
  ShaderBuilder builder_(_fbb);
  builder_.add_fragment_code(fragment_code);
  builder_.add_vertex_code(vertex_code);
  builder_.add_id(id);
  builder_.add_name(name);
  builder_.add_precompile(precompile);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Shader> CreateShaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t id = 0,
    ShaderType type = ShaderType_GLSL,
    bool precompile = false,
    const char *vertex_code = nullptr,
    const char *fragment_code = nullptr) {
  return CreateShader(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      type,
      precompile,
      vertex_code ? _fbb.CreateString(vertex_code) : 0,
      fragment_code ? _fbb.CreateString(fragment_code) : 0);
}

inline flatbuffers::TypeTable *ShaderTypeTable();

inline flatbuffers::TypeTable *ShaderTypeTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ShaderTypeTypeTable
  };
  static const int32_t values[] = { 0, 1, 2, 3 };
  static const char *names[] = {
    "GLSL",
    "GLSLES",
    "HLSL9",
    "HLSL11"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 4, type_codes, type_refs, values, names, nullptr
  };
  return &tt;
}

inline flatbuffers::TypeTable *ShaderTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ShaderTypeTypeTable
  };
  static const char *names[] = {
    "name",
    "id",
    "type",
    "precompile",
    "vertex_code",
    "fragment_code"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 6, type_codes, type_refs, nullptr, names, nullptr
  };
  return &tt;
}

inline const Shader *GetShader(const void *buf) {
  return flatbuffers::GetRoot<Shader>(buf);
}

inline bool VerifyShaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Shader>(nullptr);
}

inline void FinishShaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Shader> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_SHADER_H_
