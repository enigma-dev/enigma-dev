// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPT_H_
#define FLATBUFFERS_GENERATED_SCRIPT_H_

#include "flatbuffers/flatbuffers.h"

struct Script;

struct Script FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_CODE = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *code() const {
    return GetPointer<const flatbuffers::String *>(VT_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.Verify(code()) &&
           verifier.EndTable();
  }
};

struct ScriptBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Script::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Script::VT_ID, id, 0);
  }
  void add_code(flatbuffers::Offset<flatbuffers::String> code) {
    fbb_.AddOffset(Script::VT_CODE, code);
  }
  explicit ScriptBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptBuilder &operator=(const ScriptBuilder &);
  flatbuffers::Offset<Script> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Script>(end);
    return o;
  }
};

inline flatbuffers::Offset<Script> CreateScript(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> code = 0) {
  ScriptBuilder builder_(_fbb);
  builder_.add_code(code);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Script> CreateScriptDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t id = 0,
    const char *code = nullptr) {
  return CreateScript(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      code ? _fbb.CreateString(code) : 0);
}

inline flatbuffers::TypeTable *ScriptTypeTable();

inline flatbuffers::TypeTable *ScriptTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char *names[] = {
    "name",
    "id",
    "code"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names, nullptr
  };
  return &tt;
}

inline const Script *GetScript(const void *buf) {
  return flatbuffers::GetRoot<Script>(buf);
}

inline bool VerifyScriptBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Script>(nullptr);
}

inline void FinishScriptBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Script> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_SCRIPT_H_
