// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOUND_H_
#define FLATBUFFERS_GENERATED_SOUND_H_

#include "flatbuffers/flatbuffers.h"

struct SoundEffects;

struct Sound;

enum SoundKind {
  SoundKind_NORMAL = 0,
  SoundKind_BACKGROUND_MUSIC = 1,
  SoundKind_THREE_DIMENSIONAL = 2,
  SoundKind_MULTIMEDIA_PLAYER = 3,
  SoundKind_MIN = SoundKind_NORMAL,
  SoundKind_MAX = SoundKind_MULTIMEDIA_PLAYER
};

inline SoundKind (&EnumValuesSoundKind())[4] {
  static SoundKind values[] = {
    SoundKind_NORMAL,
    SoundKind_BACKGROUND_MUSIC,
    SoundKind_THREE_DIMENSIONAL,
    SoundKind_MULTIMEDIA_PLAYER
  };
  return values;
}

inline const char **EnumNamesSoundKind() {
  static const char *names[] = {
    "NORMAL",
    "BACKGROUND_MUSIC",
    "THREE_DIMENSIONAL",
    "MULTIMEDIA_PLAYER",
    nullptr
  };
  return names;
}

inline const char *EnumNameSoundKind(SoundKind e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSoundKind()[index];
}

MANUALLY_ALIGNED_STRUCT(1) SoundEffects FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t chorus_;
  uint8_t echo_;
  uint8_t flanger_;
  uint8_t gargle_;
  uint8_t reverb_;

 public:
  SoundEffects() {
    memset(this, 0, sizeof(SoundEffects));
  }
  SoundEffects(bool _chorus, bool _echo, bool _flanger, bool _gargle, bool _reverb)
      : chorus_(flatbuffers::EndianScalar(static_cast<uint8_t>(_chorus))),
        echo_(flatbuffers::EndianScalar(static_cast<uint8_t>(_echo))),
        flanger_(flatbuffers::EndianScalar(static_cast<uint8_t>(_flanger))),
        gargle_(flatbuffers::EndianScalar(static_cast<uint8_t>(_gargle))),
        reverb_(flatbuffers::EndianScalar(static_cast<uint8_t>(_reverb))) {
  }
  bool chorus() const {
    return flatbuffers::EndianScalar(chorus_) != 0;
  }
  bool echo() const {
    return flatbuffers::EndianScalar(echo_) != 0;
  }
  bool flanger() const {
    return flatbuffers::EndianScalar(flanger_) != 0;
  }
  bool gargle() const {
    return flatbuffers::EndianScalar(gargle_) != 0;
  }
  bool reverb() const {
    return flatbuffers::EndianScalar(reverb_) != 0;
  }
};
STRUCT_END(SoundEffects, 5);

struct Sound FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_KIND = 8,
    VT_FILE_TYPE = 10,
    VT_FILE_NAME = 12,
    VT_EFFECTS = 14,
    VT_VOLUME = 16,
    VT_PAN = 18,
    VT_PRELOAD = 20,
    VT_DATA = 22
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  SoundKind kind() const {
    return static_cast<SoundKind>(GetField<int8_t>(VT_KIND, 0));
  }
  const flatbuffers::String *file_type() const {
    return GetPointer<const flatbuffers::String *>(VT_FILE_TYPE);
  }
  const flatbuffers::String *file_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FILE_NAME);
  }
  const SoundEffects *effects() const {
    return GetStruct<const SoundEffects *>(VT_EFFECTS);
  }
  double volume() const {
    return GetField<double>(VT_VOLUME, 0.0);
  }
  double pan() const {
    return GetField<double>(VT_PAN, 0.0);
  }
  bool preload() const {
    return GetField<uint8_t>(VT_PRELOAD, 0) != 0;
  }
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int8_t>(verifier, VT_KIND) &&
           VerifyOffset(verifier, VT_FILE_TYPE) &&
           verifier.Verify(file_type()) &&
           VerifyOffset(verifier, VT_FILE_NAME) &&
           verifier.Verify(file_name()) &&
           VerifyField<SoundEffects>(verifier, VT_EFFECTS) &&
           VerifyField<double>(verifier, VT_VOLUME) &&
           VerifyField<double>(verifier, VT_PAN) &&
           VerifyField<uint8_t>(verifier, VT_PRELOAD) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct SoundBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Sound::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Sound::VT_ID, id, 0);
  }
  void add_kind(SoundKind kind) {
    fbb_.AddElement<int8_t>(Sound::VT_KIND, static_cast<int8_t>(kind), 0);
  }
  void add_file_type(flatbuffers::Offset<flatbuffers::String> file_type) {
    fbb_.AddOffset(Sound::VT_FILE_TYPE, file_type);
  }
  void add_file_name(flatbuffers::Offset<flatbuffers::String> file_name) {
    fbb_.AddOffset(Sound::VT_FILE_NAME, file_name);
  }
  void add_effects(const SoundEffects *effects) {
    fbb_.AddStruct(Sound::VT_EFFECTS, effects);
  }
  void add_volume(double volume) {
    fbb_.AddElement<double>(Sound::VT_VOLUME, volume, 0.0);
  }
  void add_pan(double pan) {
    fbb_.AddElement<double>(Sound::VT_PAN, pan, 0.0);
  }
  void add_preload(bool preload) {
    fbb_.AddElement<uint8_t>(Sound::VT_PRELOAD, static_cast<uint8_t>(preload), 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(Sound::VT_DATA, data);
  }
  explicit SoundBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SoundBuilder &operator=(const SoundBuilder &);
  flatbuffers::Offset<Sound> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Sound>(end);
    return o;
  }
};

inline flatbuffers::Offset<Sound> CreateSound(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    SoundKind kind = SoundKind_NORMAL,
    flatbuffers::Offset<flatbuffers::String> file_type = 0,
    flatbuffers::Offset<flatbuffers::String> file_name = 0,
    const SoundEffects *effects = 0,
    double volume = 0.0,
    double pan = 0.0,
    bool preload = false,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  SoundBuilder builder_(_fbb);
  builder_.add_pan(pan);
  builder_.add_volume(volume);
  builder_.add_data(data);
  builder_.add_effects(effects);
  builder_.add_file_name(file_name);
  builder_.add_file_type(file_type);
  builder_.add_id(id);
  builder_.add_name(name);
  builder_.add_preload(preload);
  builder_.add_kind(kind);
  return builder_.Finish();
}

inline flatbuffers::Offset<Sound> CreateSoundDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t id = 0,
    SoundKind kind = SoundKind_NORMAL,
    const char *file_type = nullptr,
    const char *file_name = nullptr,
    const SoundEffects *effects = 0,
    double volume = 0.0,
    double pan = 0.0,
    bool preload = false,
    const std::vector<int8_t> *data = nullptr) {
  return CreateSound(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      kind,
      file_type ? _fbb.CreateString(file_type) : 0,
      file_name ? _fbb.CreateString(file_name) : 0,
      effects,
      volume,
      pan,
      preload,
      data ? _fbb.CreateVector<int8_t>(*data) : 0);
}

inline const Sound *GetSound(const void *buf) {
  return flatbuffers::GetRoot<Sound>(buf);
}

inline bool VerifySoundBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sound>(nullptr);
}

inline void FinishSoundBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sound> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_SOUND_H_
