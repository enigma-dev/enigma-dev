// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBJECT_H_
#define FLATBUFFERS_GENERATED_OBJECT_H_

#include "flatbuffers/flatbuffers.h"

struct Event;

struct MainEvent;

struct Object;

struct Event FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_CODE = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *code() const {
    return GetPointer<const flatbuffers::String *>(VT_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.Verify(code()) &&
           verifier.EndTable();
  }
};

struct EventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Event::VT_ID, id, 0);
  }
  void add_code(flatbuffers::Offset<flatbuffers::String> code) {
    fbb_.AddOffset(Event::VT_CODE, code);
  }
  explicit EventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventBuilder &operator=(const EventBuilder &);
  flatbuffers::Offset<Event> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Event>(end);
    return o;
  }
};

inline flatbuffers::Offset<Event> CreateEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> code = 0) {
  EventBuilder builder_(_fbb);
  builder_.add_code(code);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Event> CreateEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *code = nullptr) {
  return CreateEvent(
      _fbb,
      id,
      code ? _fbb.CreateString(code) : 0);
}

struct MainEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_EVENTS = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Event>> *events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Event>> *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.Verify(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           verifier.EndTable();
  }
};

struct MainEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(MainEvent::VT_ID, id, 0);
  }
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Event>>> events) {
    fbb_.AddOffset(MainEvent::VT_EVENTS, events);
  }
  explicit MainEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MainEventBuilder &operator=(const MainEventBuilder &);
  flatbuffers::Offset<MainEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MainEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<MainEvent> CreateMainEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Event>>> events = 0) {
  MainEventBuilder builder_(_fbb);
  builder_.add_events(events);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<MainEvent> CreateMainEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const std::vector<flatbuffers::Offset<Event>> *events = nullptr) {
  return CreateMainEvent(
      _fbb,
      id,
      events ? _fbb.CreateVector<flatbuffers::Offset<Event>>(*events) : 0);
}

struct Object FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_PARENT_ID = 8,
    VT_SPRITE_ID = 10,
    VT_MASK_ID = 12,
    VT_DEPTH = 14,
    VT_SOLID = 16,
    VT_VISIBLE = 18,
    VT_PERSISENT = 20,
    VT_MAIN_EVENTS = 22
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t parent_id() const {
    return GetField<int32_t>(VT_PARENT_ID, 0);
  }
  int32_t sprite_id() const {
    return GetField<int32_t>(VT_SPRITE_ID, 0);
  }
  int32_t mask_id() const {
    return GetField<int32_t>(VT_MASK_ID, 0);
  }
  int32_t depth() const {
    return GetField<int32_t>(VT_DEPTH, 0);
  }
  bool solid() const {
    return GetField<uint8_t>(VT_SOLID, 0) != 0;
  }
  bool visible() const {
    return GetField<uint8_t>(VT_VISIBLE, 0) != 0;
  }
  bool persisent() const {
    return GetField<uint8_t>(VT_PERSISENT, 0) != 0;
  }
  const flatbuffers::Vector<flatbuffers::Offset<MainEvent>> *main_events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MainEvent>> *>(VT_MAIN_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int32_t>(verifier, VT_PARENT_ID) &&
           VerifyField<int32_t>(verifier, VT_SPRITE_ID) &&
           VerifyField<int32_t>(verifier, VT_MASK_ID) &&
           VerifyField<int32_t>(verifier, VT_DEPTH) &&
           VerifyField<uint8_t>(verifier, VT_SOLID) &&
           VerifyField<uint8_t>(verifier, VT_VISIBLE) &&
           VerifyField<uint8_t>(verifier, VT_PERSISENT) &&
           VerifyOffset(verifier, VT_MAIN_EVENTS) &&
           verifier.Verify(main_events()) &&
           verifier.VerifyVectorOfTables(main_events()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Object::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Object::VT_ID, id, 0);
  }
  void add_parent_id(int32_t parent_id) {
    fbb_.AddElement<int32_t>(Object::VT_PARENT_ID, parent_id, 0);
  }
  void add_sprite_id(int32_t sprite_id) {
    fbb_.AddElement<int32_t>(Object::VT_SPRITE_ID, sprite_id, 0);
  }
  void add_mask_id(int32_t mask_id) {
    fbb_.AddElement<int32_t>(Object::VT_MASK_ID, mask_id, 0);
  }
  void add_depth(int32_t depth) {
    fbb_.AddElement<int32_t>(Object::VT_DEPTH, depth, 0);
  }
  void add_solid(bool solid) {
    fbb_.AddElement<uint8_t>(Object::VT_SOLID, static_cast<uint8_t>(solid), 0);
  }
  void add_visible(bool visible) {
    fbb_.AddElement<uint8_t>(Object::VT_VISIBLE, static_cast<uint8_t>(visible), 0);
  }
  void add_persisent(bool persisent) {
    fbb_.AddElement<uint8_t>(Object::VT_PERSISENT, static_cast<uint8_t>(persisent), 0);
  }
  void add_main_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MainEvent>>> main_events) {
    fbb_.AddOffset(Object::VT_MAIN_EVENTS, main_events);
  }
  explicit ObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjectBuilder &operator=(const ObjectBuilder &);
  flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline flatbuffers::Offset<Object> CreateObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    int32_t parent_id = 0,
    int32_t sprite_id = 0,
    int32_t mask_id = 0,
    int32_t depth = 0,
    bool solid = false,
    bool visible = false,
    bool persisent = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MainEvent>>> main_events = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_main_events(main_events);
  builder_.add_depth(depth);
  builder_.add_mask_id(mask_id);
  builder_.add_sprite_id(sprite_id);
  builder_.add_parent_id(parent_id);
  builder_.add_id(id);
  builder_.add_name(name);
  builder_.add_persisent(persisent);
  builder_.add_visible(visible);
  builder_.add_solid(solid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object> CreateObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t id = 0,
    int32_t parent_id = 0,
    int32_t sprite_id = 0,
    int32_t mask_id = 0,
    int32_t depth = 0,
    bool solid = false,
    bool visible = false,
    bool persisent = false,
    const std::vector<flatbuffers::Offset<MainEvent>> *main_events = nullptr) {
  return CreateObject(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      parent_id,
      sprite_id,
      mask_id,
      depth,
      solid,
      visible,
      persisent,
      main_events ? _fbb.CreateVector<flatbuffers::Offset<MainEvent>>(*main_events) : 0);
}

inline const Object *GetObject(const void *buf) {
  return flatbuffers::GetRoot<Object>(buf);
}

inline bool VerifyObjectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Object>(nullptr);
}

inline void FinishObjectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Object> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_OBJECT_H_
