# Awesomer Makefile generated by Rusky: stop relying on Bash hacks and automate more stuff
# It will automatically build the shared library out of any .cpp files in this directory or its
# subdirectories (recursively). It will also automatically calculate and update all dependencies
# automatically when 'make' is run, so there is no need to run genmake.sh EVER.

#################
# configuration #
#################
# TODO: better config process based on features rather than OS

BASE = compileEGMf
OS := $(shell uname -s)
ifeq ($(OS), Linux)
	TARGET := ../lib$(BASE).so
	CXXFLAGS += -fPIC
	MKDIR := mkdir
else ifeq ($(OS), Darwin)
	TARGET := ../lib$(BASE).dylib
	CXXFLAGS += -fPIC
	MKDIR := mkdir
else
	TARGET := ../$(BASE).dll
	LDFLAGS += -static-libgcc
	MKDIR := mkdir.exe
endif

###########
# options #
###########

CXX := g++
CXXFLAGS += -std=c++11 -m32 -Wall -O3 -g -I./JDI/src
LDFLAGS += -shared -m32 -O3 -g

# This implements a recursive wildcard allowing us to iterate in subdirs
rwildcard=$(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

SOURCES := $(filter-out ./standalone_main.cpp, $(call rwildcard,./,*.cpp))
OBJECTS := $(addprefix .eobjs/,$(SOURCES:.cpp=.o))
DEPENDS := $(OBJECTS:.o=.d)

# sort has the nice side effect of removing duplicates. this may or may not be faster.
OBJDIRS := $(sort $(dir $(OBJECTS)))
override CPPFLAGS += -I.

############
# building #
############

.PHONY: all clean

all: $(TARGET)

clean:
	$(RM) $(TARGET) $(OBJECTS) $(DEPENDS)

$(TARGET): $(OBJECTS)
	$(CXX) $(LDFLAGS) -o $@ $(OBJECTS) $(LDLIBS)

# GCC will figure out dependencies and write out makefile rules in %.d when they change
# -MMD outputs dependencies to %.d as a side effect of compilation, ignoring system headers
# -MP gives phony rules for non-target files, avoiding problems with missing files
.eobjs/%.o .eobjs/%.d: %.cpp | $(OBJDIRS)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -MMD -MP -c -o .eobjs/$*.o $<

$(OBJDIRS):
	$(MKDIR) -p $@

ifneq ($(MAKECMDGOALS),clean)
-include $(DEPENDS)
endif
